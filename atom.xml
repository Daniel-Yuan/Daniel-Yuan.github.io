<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daniel_yuan&#39;s Blog</title>
  
  <subtitle>Daniel_yuan AK IOI</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-09-18T11:36:31.051Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Daniel_yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CF506E 题解</title>
    <link href="http://example.com/2020/09/17/CF506E-%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2020/09/17/CF506E-%E9%A2%98%E8%A7%A3/</id>
    <published>2020-09-17T13:30:58.000Z</published>
    <updated>2020-09-18T11:36:31.051Z</updated>
    
    <content type="html"><![CDATA[<p>一道极 (e) 妙 (xin) 的自动机优化 DP 的题目。</p><p>先假设最后得到的字符串为 $T$，由题意易知 $T$ 合法当且仅当 $T$ 是回文串且 $S$ 是 $T$ 的一个子序列。</p><p>$T$ 是回文串的这个性质我们可以通过从外向内一个一个填字符来实现，所以我们需要 DP 的是 $S$ 相对于 $T$ 而言被匹配了多少个字符。</p><p>特别的，因为当 $T$ 的长度为奇数的时候，最后一次填的字符本质上是一个字符，需要特别处理，所以下面我们先讨论 $T$ 的长度为偶数的情况。</p><p>因为 $T$ 这个字符串是从外向内确定的，所以 $S$ 的匹配也是从外向内的，故可以设 $f_{i,l,r}$ 表示考虑 $T$ 的前后 $i$ 个字符，当前 $S$ 还剩下 $[l,r]$ 没有匹配到的方案数。</p><p>考虑转移，假设当前有 $s[l] = s[r]$，那么如果当前填的字符是 $s[l]$，就可以转移到 $f_{i+1,l+1,r-1}$，如果当前填的字符不是 $s[l]$，就可以转移到 $f_{i+1,l,r}$，转移系数为 $25$。</p><p>假设当前 $s[l] \not= s[r]$，那么如果当前填的字符是 $s[l]$，就可以转移到 $f_{i+1,l+1,r}$，如果当前填的字符是 $s[r]$，就可以转移到 $f_{i+1,l,r-1}$，如果当前填的字符不是两者，就可以转移到 $f_{i+1,l,r}$，转移系数为 $24$。</p><p>需要注意的是，对于所有的 $f_{i,l,r}(l&gt;r)$，因为 $(l&gt;r)$，也就是说 $S$ 已经被匹配完，所以无论填什么字符都没关系，那么它们就可以转移到 $f_{i+1,l,r}$，转移系数为 $26$。</p><p>这样我们便有了一个 $n\times |S|^2$ 的 DP，如果把后面的状态强行剥离就可以做到 $|S|^6\log n$，似乎并没有什么用。</p><a id="more"></a><p>考虑优化这个 DP，我们把这个 DP 的转移用一张图来表示，对于 $S=abab$，转移图是这样的：</p><p><img src="https://s1.ax1x.com/2020/09/17/wftvp6.png" alt="wftvp6.png"></p><p>其中下划线是已经匹配的部分，在 $i$ 行 $j$ 列的椭圆表示 $f_{x,i,j}$，我们把所有的 $l&gt;r$ 的状态归到一个状态里面去，就有了如上的转移图。一个合法的方案本质上就是从 $abab$ 走 $n+|S|$ 步到 ____​ 的一条路径。</p><p>我们把某条路径上面的所有节点拿出来，并且按照 $s[l]$ 是否等于 $s[r]$ 分类成两种点，可以发现，无论这两种点的排列如何，当这两种点的数量确定的时候，答案已经确定了。</p><p>设 $s[l]=s[r]$ 的点为 $0$ 类点，$s[l]\not=s[r]$ 的点为 $1$ 类点，不难发现在某条路径上确定了 $1$ 类点的数目后，可以直接计算得到一个唯一的 $0$ 类点的数目，而 $1$ 类点的数目的取值范围为 $[0,len-1]$，所以总共不同的路径数最多只有 $|S|$ 条。</p><p>考虑有多少种方案经过某条路径，设 $g_{x,l,r}$ 表示在区间 $[l,r]$ 的这段转移中，总共经过 $x$ 个 $1$ 类点的方案数，用记忆化搜索即可求得，我们需要的就是 $g_{x,1,|S|}$。这部分复杂度 $|S|^3$。</p><p>在一条路径上面 DP 的复杂度是 $|S|\times n$，通过矩阵优化可以优化到 $|S|^3\times \log n$，总复杂度即 $|S|^4\log n$，虽然仍然过不了，但是优化了很多。</p><p>我们设起点为 $S$， $0$ 类点为黑色，$1$ 类点为白色，终点为 $T$，上述过程中的转移图差不多是这样：</p><p><img src="https://s1.ax1x.com/2020/09/18/w4aqtH.png" alt="w4aqtH.png"></p><p>考虑继续优化，上述算法问题就出在我们对每种路径都跑了一次 DP，考虑把它们合并成一次。先规定所有的路径$0$ 类点都在前面，$1$ 类点都在后面。然后在新的转移图上把第一行放上 $0$ 类点，第二行放上 $1$ 类点，在第一行的点之间连边，第二行的点之间连边，现在就考虑怎么在第一行的点和第二行的点之间连边，不难发现，这种连边实质上代表了一种路径，因为这种边只能走一次，且走这种边就可以确定经过的 $0$ 类点和 $1$ 类点的数目，这样的话复杂度就优化到了 $|S|^3\log n$。</p><p>把上图按照这种优化连边之后的图就是这样：</p><p><img src="https://s1.ax1x.com/2020/09/18/w4d83R.png" alt="w4d83R.png"></p><p>其中从第一行的点到第二行的点的转移系数为有多少种方案经过这种路径，即 $g_{x,l,r}$。可以发现这样转化之后只有 $\frac{3}{2}|S|$ 个点，且因为转移图是 DAG 图，所以可以通过编号使得转移都是从编号小的点转移到编号大的点，这样可以得到一个比较优秀的常数优化。复杂度 $|S|^3\log n$。</p><p>最后还需要考虑一下 $|T|$ 为奇数。我们先把 $|T|$ 的长度看做 $|T|+1$ ，这样就可以得到一个答案。考虑有多少种方案不合法，可以发现是所有最后一步是放两个字符，且恰好在最后一次转移的时候放的方案，我们把这种方案算出来减掉即可。具体的，把所有最后一步是放两个字符的路径拿出来，然后去掉终点的自环再跑一遍上述 DP，这次求出来的答案就是要减掉的方案。</p><p>至此便可完美解决此题。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILEIO(name) freopen(name<span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(name<span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> mod = <span class="number">1e4</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">205</span>][<span class="number">205</span>][<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> lim;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> a[<span class="number">305</span>][<span class="number">305</span>];</span><br><span class="line">  Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix &amp;A) &#123;</span><br><span class="line">    Matrix re;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= lim; ++i)</span><br><span class="line">      <span class="keyword">for</span> (RI j = i; j &lt;= lim; ++j) &#123;</span><br><span class="line">        re.a[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (RI k = i; k &lt;= j; ++k)</span><br><span class="line">          re.a[i][j] = (re.a[i][j] + a[i][k] * A.a[k][j]) % mod;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; F;</span><br><span class="line"></span><br><span class="line"><span class="function">Matrix <span class="title">Matpow</span><span class="params">(Matrix a, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  Matrix re;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= lim; ++i)</span><br><span class="line">    <span class="keyword">for</span> (RI j = <span class="number">1</span>; j &lt;= lim; ++j)</span><br><span class="line">      re.a[i][j] = (i == j);</span><br><span class="line">  <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, a = a * a)</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) re = re * a;</span><br><span class="line">  <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DP</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> x == <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (f[x][l][r] != <span class="number">-1</span>) <span class="keyword">return</span> f[x][l][r];</span><br><span class="line">  <span class="keyword">if</span> (s[l] == s[r])</span><br><span class="line">    f[x][l][r] = DP(x, l + <span class="number">1</span>, r - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    f[x][l][r] = (DP(x - <span class="number">1</span>, l + <span class="number">1</span>, r) + DP(x - <span class="number">1</span>, l, r - <span class="number">1</span>)) % mod;</span><br><span class="line">  <span class="keyword">return</span> f[x][l][r];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  FILEIO(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(f, <span class="number">-1</span>, <span class="keyword">sizeof</span>(f));</span><br><span class="line">  <span class="keyword">int</span> n, len;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; (s + <span class="number">1</span>) &gt;&gt; n;</span><br><span class="line">  len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">  lim = len + (len + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= len - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">    F.a[i][i] = <span class="number">24</span>;</span><br><span class="line">    F.a[i][i + <span class="number">1</span>] = (i != len - <span class="number">1</span>);</span><br><span class="line">    F.a[i][lim - (len - i + <span class="number">1</span>) / <span class="number">2</span>] = DP(i, <span class="number">1</span>, len);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (RI i = len; i &lt; lim; ++i) &#123;</span><br><span class="line">    F.a[i][i] = <span class="number">25</span>;</span><br><span class="line">    F.a[i][i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  F.a[lim][lim] = <span class="number">26</span>;</span><br><span class="line">  F = Matpow(F, (n + len + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (len != <span class="number">1</span>)</span><br><span class="line">    ans = F.a[<span class="number">1</span>][lim];</span><br><span class="line">  ans = (ans + F.a[len][lim] * DP(<span class="number">0</span>, <span class="number">1</span>, len) % mod) % mod;</span><br><span class="line">  <span class="keyword">if</span> ((n + len) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(F.a, <span class="number">0</span>, <span class="keyword">sizeof</span>(F.a));</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= len - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">      F.a[i][i] = <span class="number">24</span>;</span><br><span class="line">      F.a[i][i + <span class="number">1</span>] = (i != len - <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (!((len - i) &amp; <span class="number">1</span>))</span><br><span class="line">        F.a[i][lim - (len - i + <span class="number">1</span>) / <span class="number">2</span>] = DP(i, <span class="number">1</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (RI i = len; i &lt; lim; ++i) &#123;</span><br><span class="line">      F.a[i][i] = <span class="number">25</span>;</span><br><span class="line">      F.a[i][i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    F = Matpow(F, (n + len + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (len != <span class="number">1</span>)</span><br><span class="line">      ans = (ans - F.a[<span class="number">1</span>][lim] + mod) % mod;</span><br><span class="line">    <span class="keyword">if</span> (!(len &amp; <span class="number">1</span>))</span><br><span class="line">      ans = (ans - F.a[len][lim] * DP(<span class="number">0</span>, <span class="number">1</span>, len) % mod + mod) % mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// created by Daniel yuan</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     ________</span></span><br><span class="line"><span class="comment">    /        \</span></span><br><span class="line"><span class="comment">   / /      \ \</span></span><br><span class="line"><span class="comment">  / /        \ \</span></span><br><span class="line"><span class="comment">  \            /</span></span><br><span class="line"><span class="comment">   \  ______  /</span></span><br><span class="line"><span class="comment">    \________/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一道极 (e) 妙 (xin) 的自动机优化 DP 的题目。&lt;/p&gt;
&lt;p&gt;先假设最后得到的字符串为 $T$，由题意易知 $T$ 合法当且仅当 $T$ 是回文串且 $S$ 是 $T$ 的一个子序列。&lt;/p&gt;
&lt;p&gt;$T$ 是回文串的这个性质我们可以通过从外向内一个一个填字符来实现，所以我们需要 DP 的是 $S$ 相对于 $T$ 而言被匹配了多少个字符。&lt;/p&gt;
&lt;p&gt;特别的，因为当 $T$ 的长度为奇数的时候，最后一次填的字符本质上是一个字符，需要特别处理，所以下面我们先讨论 $T$ 的长度为偶数的情况。&lt;/p&gt;
&lt;p&gt;因为 $T$ 这个字符串是从外向内确定的，所以 $S$ 的匹配也是从外向内的，故可以设 $f_{i,l,r}$ 表示考虑 $T$ 的前后 $i$ 个字符，当前 $S$ 还剩下 $[l,r]$ 没有匹配到的方案数。&lt;/p&gt;
&lt;p&gt;考虑转移，假设当前有 $s[l] = s[r]$，那么如果当前填的字符是 $s[l]$，就可以转移到 $f_{i+1,l+1,r-1}$，如果当前填的字符不是 $s[l]$，就可以转移到 $f_{i+1,l,r}$，转移系数为 $25$。&lt;/p&gt;
&lt;p&gt;假设当前 $s[l] \not= s[r]$，那么如果当前填的字符是 $s[l]$，就可以转移到 $f_{i+1,l+1,r}$，如果当前填的字符是 $s[r]$，就可以转移到 $f_{i+1,l,r-1}$，如果当前填的字符不是两者，就可以转移到 $f_{i+1,l,r}$，转移系数为 $24$。&lt;/p&gt;
&lt;p&gt;需要注意的是，对于所有的 $f_{i,l,r}(l&amp;gt;r)$，因为 $(l&amp;gt;r)$，也就是说 $S$ 已经被匹配完，所以无论填什么字符都没关系，那么它们就可以转移到 $f_{i+1,l,r}$，转移系数为 $26$。&lt;/p&gt;
&lt;p&gt;这样我们便有了一个 $n\times |S|^2$ 的 DP，如果把后面的状态强行剥离就可以做到 $|S|^6\log n$，似乎并没有什么用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP" scheme="http://example.com/tags/DP/"/>
    
    <category term="自动机" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Daniel_yuan&#39;s New Blog</title>
    <link href="http://example.com/2020/09/15/Daniel-yuan-s-New-Blog/"/>
    <id>http://example.com/2020/09/15/Daniel-yuan-s-New-Blog/</id>
    <published>2020-09-15T11:04:27.000Z</published>
    <updated>2020-09-15T11:05:00.308Z</updated>
    
    <content type="html"><![CDATA[<p>这是 Daniel_yuan 的新博客。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是 Daniel_yuan 的新博客。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CSP-S 2019 游记</title>
    <link href="http://example.com/2019/11/16/CSP-S%202019%20%E6%B8%B8%E8%AE%B0/"/>
    <id>http://example.com/2019/11/16/CSP-S%202019%20%E6%B8%B8%E8%AE%B0/</id>
    <published>2019-11-16T10:48:53.000Z</published>
    <updated>2020-09-18T11:37:02.299Z</updated>
    
    <content type="html"><![CDATA[<p>我们还在这样的世上活着；我也早觉得有写一点东西的必要了。离十一月十六日只不足几天，CSP 的审判快要降临了罢，我正有写一点东西的必要了。（雾</p><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day -1"></a>Day -1</h2><p>教练组织高二的学长出去玩去了，苦逼的我还要接着考 CSP 信(zi)心(bi)赛。/羡慕</p><p>配 <code>emacs</code> 的时候突然忘记 <code>default</code> 怎么写了，一直认为最后两个字母是 <code>te</code> 。最后还是靠着 <code>switch</code> 的高亮打出来的（CSP 前犯这种错误我怕不是要爆零）</p><p>晚上 U 盘坏了，捣鼓了一晚上。</p><p>考前 RP 突然爆炸，感觉吃枣药丸（怕不是 CSP-S RP++ 爆负了……）</p><h2 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h2><p>上午写了一个线性基板子，一个矩阵快速幂板子，一个 <code>Miller-Rabin</code> 板子。</p><p>之后就欢快地颓了一下午加一晚上。<del>（某乎：如何看待某巨佬 AK CSP-S）</del></p><h2 id="Day-1-1"><a href="#Day-1-1" class="headerlink" title="Day 1"></a>Day 1</h2><a id="more"></a><p>在一阵互相膜拜之后进入了考场。</p><p>座位之间有隔板 <del>考试前还在讨论如何用毒瘤码风祸害周围同学</del>，键盘敲起来特别舒服，值得一提的是，<code>Emacs</code> 有配置文件！<del>好评</del>。</p><p>开考后 10 分钟就把 T1 切了。</p><p>T2 像极了考前的一道 <del>九条可怜</del> 的括号匹配题，几分钟码了个 <code>Trie</code> 树就过样例了，然而那个题<strong>忽略括号方向</strong> <del>我给忘了QAQ</del>。</p><p>然后 T3 看上去很玄学的样子，开始手玩，结果手玩不动样例……<del>还不如暴搜</del></p><p>闲的没事就给 T2 写了个对拍，一组就错……</p><p>发现了那个小错误后重新思考做法，发现还是可以用栈的思想，在每次加入或删除一个节点的时候计算贡献，过了样例后接着拍，还是炸了，不过 <del>它已经被我优化到拍几百组错一组了</del>。</p><p>接着调，发现是个小错误，调完后 <del>又过了样例</del>，接着拍，还是炸了，不过 <del>它已经被我优化到拍几千组错一组了</del>。</p><p>接着调，又发现个小错误，跳完后 <del>又过了样例</del>，接着拍，还是炸了，不过 <del>它已经被我优化到拍几万组错一组了</del>。</p><p>当我百思不得其解时，已经 10:50了 QAQ。</p><p>当我气的去打完 T3 搜索并且想了一下特殊数据后，已经 11:20 了。</p><p>当我感慨造化弄人，以为要命绝于此，要被这次 <code>CSP</code> 送退役时，发现：<strong>我 ** <code>vector</code> 访问了非法内存 ？？？</strong> 。</p><p>改完之后拍几万组都没有问题，不过这次考试也因为 T2 止步 210 了……</p><p>又欢乐地颓了一下午加一晚上。</p><h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>昨天颓太欢乐了，今早莫名的困……</p><p>感觉今天心态都不一样了……昨天想着怎么拿高分怎么 AK，今天就只想着多拿点分 <del>（还是不能给我这种蒟蒻太高的期望）</del></p><p>开场就写了一个 T1 的 $n^2m$ 的做法，后来发现它假了，只能补上一维保证正确性，最后打了个 $n^3m$ 的 <code>DP</code>。</p><p>然后写 T2，一开始写了一个 $n^3$ 的<code>DP</code>，并且理性分析发现可以优化到 $n^2$ 。经过人(bao)类(li)智(da)慧(biao)后，发现每个以每个点为终点的 <code>DP</code> 值有且仅有一个有用，于是可以使用单调队列优化做到 $O(n)$ ，<del>但是为啥我压 8 位高精都可以MLE，只能过 type=0</del></p><p>最后写 T3，发现暴力分出奇地高，于是写完暴搜后就找特殊数据的规律，<del>还真被我找到了</del>，又骗了一大波分。</p><p>一道题都没切预计都比昨天高……<del>我 ** 昨天在干嘛</del>。</p><h2 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h2><p>210 + 247 = 457……没能完成教练定的500分目标<del>AFO AFO</del>……</p><p>趁还没有退役先把游记码了……<del>AFO了就没机会了</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;我们还在这样的世上活着；我也早觉得有写一点东西的必要了。离十一月十六日只不足几天，CSP 的审判快要降临了罢，我正有写一点东西的必要了。（雾&lt;/p&gt;
&lt;h2 id=&quot;Day-1&quot;&gt;&lt;a href=&quot;#Day-1&quot; class=&quot;headerlink&quot; title=&quot;Day -1&quot;&gt;&lt;/a&gt;Day -1&lt;/h2&gt;&lt;p&gt;教练组织高二的学长出去玩去了，苦逼的我还要接着考 CSP 信(zi)心(bi)赛。/羡慕&lt;/p&gt;
&lt;p&gt;配 &lt;code&gt;emacs&lt;/code&gt; 的时候突然忘记 &lt;code&gt;default&lt;/code&gt; 怎么写了，一直认为最后两个字母是 &lt;code&gt;te&lt;/code&gt; 。最后还是靠着 &lt;code&gt;switch&lt;/code&gt; 的高亮打出来的（CSP 前犯这种错误我怕不是要爆零）&lt;/p&gt;
&lt;p&gt;晚上 U 盘坏了，捣鼓了一晚上。&lt;/p&gt;
&lt;p&gt;考前 RP 突然爆炸，感觉吃枣药丸（怕不是 CSP-S RP++ 爆负了……）&lt;/p&gt;
&lt;h2 id=&quot;Day-0&quot;&gt;&lt;a href=&quot;#Day-0&quot; class=&quot;headerlink&quot; title=&quot;Day 0&quot;&gt;&lt;/a&gt;Day 0&lt;/h2&gt;&lt;p&gt;上午写了一个线性基板子，一个矩阵快速幂板子，一个 &lt;code&gt;Miller-Rabin&lt;/code&gt; 板子。&lt;/p&gt;
&lt;p&gt;之后就欢快地颓了一下午加一晚上。&lt;del&gt;（某乎：如何看待某巨佬 AK CSP-S）&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;Day-1-1&quot;&gt;&lt;a href=&quot;#Day-1-1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h2&gt;</summary>
    
    
    
    
    <category term="游记" scheme="http://example.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
</feed>

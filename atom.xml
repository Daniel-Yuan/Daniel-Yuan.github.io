<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daniel_yuan&#39;s Blog</title>
  
  <subtitle>芙卡米天下第一可爱 n(*≧▽≦*)n</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-04-22T06:57:03.458Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Daniel_yuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HNOI2021 游记</title>
    <link href="http://example.com/2021/04/12/HNOI2021-%E6%B8%B8%E8%AE%B0/"/>
    <id>http://example.com/2021/04/12/HNOI2021-%E6%B8%B8%E8%AE%B0/</id>
    <published>2021-04-12T13:50:19.000Z</published>
    <updated>2021-04-22T06:57:03.458Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言">前言</h3><a id="more"></a><p>时间总是流逝得很快，这已经是 Daniel_yuan 经历的第三次省选了。</p><p>这也是 Daniel_yuan 所能参加的最后一次省选了。</p><p>从懵懂、激动到沉稳，改变的是心态，不变的是实力。（划掉</p><h3 id="day--inf">Day -INF</h3><p>不知为啥明明活得挺开心的晚上睡眠质量还是不好。</p><p>要么就是睡不着要么就是做一些奇奇怪怪的梦。</p><p>每天早上都睡到考勤前，然后急急忙忙跑到学校。</p><h3 id="day--1">Day -1</h3><p>去某新开发的公园散心。</p><p>因为主路十分崎岖，而选择了一条大公路。结果就围着公园绕了半圈，啥都没看到 :(。</p><p>途中发现了一串楼梯就往上爬，越爬越离谱，到了山顶就变成泥泞小路了<del>（甚至怀疑走到了山顶洞人老家）</del>。</p><p>为了激励士气，教练和班主任一拍即合，决定让我们喊山。</p><p>然而因为大家都觉得谁喊谁尴尬，就没人打算喊。结果被教练教育了一顿（大概是因为教练尴尬 :)）</p><h3 id="day-0">Day 0</h3><p>早上强制要求制定计划，决定复习一波网络流+差分约束（要素察觉</p><p>但实际上效率并不高，算是半颓半学吧。</p><h3 id="day-1">Day 1</h3><p>紧张得 5 点多就醒了，迷迷糊糊睡到了出发时间。</p><p>到了考场，发现下载文件只有 <code>.vimrc</code>，用 <code>emacs</code> 的我在一瞬间有那么小慌，后来猛然发现配置文件就在主目录下……</p><p>T1 的保证 <span class="math inline">\(a_i\)</span> 有序感觉很有问题，直接 rush 线性做法，缝缝补补肝出来个，对上拍就没管了。</p><p>T2 发现一个数的约束只有三个，但是没什么想法，手玩了 <span class="math inline">\(m=2\)</span> 后发现 <span class="math inline">\(n,m\leq 3\)</span> 都不会手玩，只能自闭。</p><p>T3 随手转化一下就有 44 分了，发现是个动态图强连通性，感觉是个不会的模板，只能自闭。</p><p>然后……就这么以 <span class="math inline">\(100+30+44\)</span> 离场了。很是自闭。</p><p>考完之后吃完饭就在机房睡觉，回家之后也是半睡半醒，迷迷糊糊地一天就这么过去了。</p><h3 id="day-2">Day 2</h3><p>在家睡觉果然就是不一样，差点就睡过头了。</p><p>雨下得很大，颇有壮士一去兮不复返之势。</p><p>T1 sb 数据结构，脑抽用 <code>map</code> 存了个东西写了个 <span class="math inline">\(\log^3\)</span> 的做法。</p><p>T2 sb 状压 DP，但是更加 sb 的我写完搜索的部分分之后就死活肝不出来。</p><p>T3 压位暴力似乎显然，然后就直接 rush 了。</p><p>写完感觉很无聊，想也想不动，颓也不敢颓，就开始想下午回家怎么 happy。</p><p>考完自爆 <span class="math inline">\(100+60+75\)</span>。很是自闭。</p><p>下午和小伙伴们胡吃海喝、把酒言欢，紧张而又平淡的 HNOI 就这么结束了。</p><h3 id="day-3">Day 3</h3><p>没测民间数据，也没上你谷，感觉考完之后整个人都置身于 OI 之外了。</p><p>考后在机房整了好几次活。</p><h3 id="day-inf">Day INF</h3><p>成绩出了，<span class="math inline">\(100+30+44+95+60+40\)</span>，很是拉胯，但是靠着 NOIP 的发挥苟进了 A 队。</p><p>Daniel_yuan 的 OI 生涯又被续上了一命（+1s</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;</summary>
    
    
    
    
    <category term="游记" scheme="http://example.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>trick 合集</title>
    <link href="http://example.com/2021/03/18/trick-%E5%90%88%E9%9B%86/"/>
    <id>http://example.com/2021/03/18/trick-%E5%90%88%E9%9B%86/</id>
    <published>2021-03-18T13:46:48.000Z</published>
    <updated>2021-04-22T02:57:06.571Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="你的魔法咒语太弱了。" data-whm="博主的魔法失效了。">  <script id="hbeData" type="hbeData" data-hmacdigest="54e9305394a4030a2ab817c791d744b75c4134bd135e94ef2fb79d0944be2e87"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">用魔法咒语解开它吧。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这篇博客被邪恶的博主用魔法封住了。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>[IOI2018] 机械娃娃 题解</title>
    <link href="http://example.com/2021/03/18/IOI2018-%E6%9C%BA%E6%A2%B0%E5%A8%83%E5%A8%83-%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/03/18/IOI2018-%E6%9C%BA%E6%A2%B0%E5%A8%83%E5%A8%83-%E9%A2%98%E8%A7%A3/</id>
    <published>2021-03-18T10:59:11.000Z</published>
    <updated>2021-03-19T12:40:07.511Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://uoj.ac/problem/408">题面在此</a>。</p><a id="more"></a><p>第一想法是对于某个触发器，它的出边是固定的，如果它的出边集合大小大于 <span class="math inline">\(1\)</span> 的话，就只能连到开关上。所以就考虑用开关来表示一个触发器的所有出边。</p><p>不难构造出一个完满二叉树的结构。按照题目顺序把前几个叶子和最后一个叶子连到这个触发器的出边上，中间的叶子就全部回到根。类似下图，其中 <span class="math inline">\(T\)</span> 集合为某个触发器的出边集合。（其中 <span class="math inline">\(1&#39;\)</span> 就是 <span class="math inline">\(1\)</span>，画图原因），路线就是 <span class="math inline">\(T1,T2,(1),T3\)</span>，走完之后所有开关都在 <code>X</code>。</p><p><img src="https://inews.gtimg.com/newsapp_ls/0/13304049297/0.png" /></p><p>仔细想想可以发现我们并不需要对每个点都开一个完满二叉树，我们完全可以只用一个完满二叉树来存储所有的出边。类似下图，其中 <span class="math inline">\(A\)</span> 是给定序列。</p><p><img src="https://inews.gtimg.com/newsapp_ls/0/13304060750/0.png" /></p><p>路线就是 <span class="math inline">\(A0,A1,A2,...\)</span>。</p><p>这样我们需要 <span class="math inline">\(A\)</span> 序列长度为 <span class="math inline">\(2\)</span> 的整数次方，最坏情况我们不能接受。</p><p>考虑 <span class="math inline">\(M=1\)</span> 的部分分，我们可以构造出来一个这样的结构，其中方点是开关。</p><p><img src="https://inews.gtimg.com/newsapp_ls/0/13304110559/0.png" /></p><p>我们仅用了 <span class="math inline">\(3\)</span> 个开关，就使得 <span class="math inline">\(U\)</span> 可以被到达 <span class="math inline">\(7\)</span> 次。</p><p>考虑每个开关的 <code>X</code> 边贡献，不难发现在图中标号为 <span class="math inline">\(v\)</span> 的开关的 <code>X</code> 边会经过 <span class="math inline">\(2^v\)</span> 次。所以我们可以通过对 <code>X</code> 边的控制来使得 <span class="math inline">\(U\)</span> 可以被经过 <span class="math inline">\([0,2^3-1]\)</span> 次。</p><p>我们把每个 <code>X</code> 边所链接的都改成一个上述的完满二叉树，我们可以通过对 <span class="math inline">\(N\)</span> 的二进制拆分来决定每个完满二叉树存在与否，就可以通过 <span class="math inline">\(N+\log_2N\)</span> 实现按照顺序遍历 <span class="math inline">\(A\)</span> 序列。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://uoj.ac/problem/408&quot;&gt;题面在此&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="妙题" scheme="http://example.com/tags/%E5%A6%99%E9%A2%98/"/>
    
    <category term="构造" scheme="http://example.com/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>妙题集合</title>
    <link href="http://example.com/2021/03/17/%E5%A6%99%E9%A2%98%E9%9B%86%E5%90%88/"/>
    <id>http://example.com/2021/03/17/%E5%A6%99%E9%A2%98%E9%9B%86%E5%90%88/</id>
    <published>2021-03-17T13:53:22.000Z</published>
    <updated>2021-03-29T12:46:18.442Z</updated>
    
    <content type="html"><![CDATA[<p>一些神题。</p><a id="more"></a><p>[SDOI2019]热闹的聚会与尴尬的聚会</p><p>给一张 <span class="math inline">\(n\)</span> 点 <span class="math inline">\(m\)</span> 边的无向图。选出两个点集 <span class="math inline">\(S\)</span>, <span class="math inline">\(T\)</span>，<span class="math inline">\(S\)</span> 没有要求，<span class="math inline">\(T\)</span> 需要满足其中任意两点没有边，<span class="math inline">\(S\)</span>, <span class="math inline">\(T\)</span> 之间没有限制。设 <span class="math inline">\(val(S)\)</span> 为仅保留 <span class="math inline">\(S\)</span> 的点和 <span class="math inline">\(S\)</span> 的点之间的边的最小度数的点的度数，<span class="math inline">\(val(T)=|T|\)</span>。构造一种满足 <span class="math inline">\(\lfloor \frac{n}{val(S)+1} \rfloor\leq val(T)\)</span> 且 <span class="math inline">\(\lfloor \frac{n}{val(T)+1} \rfloor\leq val(S)\)</span> 的方案。<span class="math inline">\(T\)</span> 组询问。<span class="math inline">\(T\leq 32,n\leq 10^4,m\leq 10^5\)</span>。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        题解    </div>    <div class='spoiler-content'>        <p>考虑贪心。每次选择度数最小的点，把它加入 <span class="math inline">\(T\)</span>，然后删去所有与 <span class="math inline">\(T\)</span> 连边的点，并更新所有点的度数。</p><p>设每次删除时的度数为 <span class="math inline">\(deg\)</span>，那么就有 <span class="math inline">\(\sum_{i=1}^T deg_i=n-|T|\)</span>。</p><p>而对于 <span class="math inline">\(S\)</span>，在某个时刻直接把剩下的点全部取出来，最优是 <span class="math inline">\(\max\{deg_i\}\)</span> 的。</p><p><span class="math inline">\(val(S)\)</span> 最劣的时候就是所有的 <span class="math inline">\(deg\)</span> 都均分，即 <span class="math inline">\(\lceil\frac{n-|T|}{|T|}\rceil\)</span>。这样仍然是满足要求的。</p><p>所以直接用个数据结构动态维护 <span class="math inline">\(deg\)</span> 即可，复杂度 <span class="math inline">\(O(T\times (m\log n))\)</span>。</p>    </div></div><hr /><p>CF1174F Ehab and the Big Finale</p><p>这是一道交互题。</p><p>你有一棵 <span class="math inline">\(n\)</span> 个节点的有根树，<span class="math inline">\(1\)</span> 号点是根节点。</p><p>这棵树中有一个隐藏的节点 <span class="math inline">\(x\)</span>，你需要通过询问把 <span class="math inline">\(x\)</span> 找出来。</p><p>你可以进行如下两种询问：</p><p>1、<code>d u</code> <span class="math inline">\((1\le u\le n)\)</span>。交互库会返回节点 <span class="math inline">\(u\)</span> 和 <span class="math inline">\(x\)</span> 的距离。</p><p>2、<code>s u</code> <span class="math inline">\((1\le u\le n)\)</span>。交互库会返回从 <span class="math inline">\(u\)</span> 到 <span class="math inline">\(x\)</span> 的路径上第二个点的标号。注意，你询问的 <span class="math inline">\(u\)</span> 必须是 <span class="math inline">\(x\)</span> 的祖先，否则会报错。</p><p>你需要在不超过 <span class="math inline">\(36\)</span> 次询问之内找出 <span class="math inline">\(x\)</span>。<span class="math inline">\(x\)</span> 是预先设定好的，不会随着询问而改变。<span class="math inline">\(n \le 2\times 10^5\)</span>。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        题解    </div>    <div class='spoiler-content'>        <p>先询问 <code>d 1</code> 得到候选点集合，设其大小为 <span class="math inline">\(cnt\)</span>。</p><p>每次把当前考虑的点移动到候选点结合的 LCA。</p><p>然后求一遍子树候选点集合大小。如果当前点 <span class="math inline">\(x\)</span> 没有一个集合大小大于 <span class="math inline">\(\frac{cnt}{2}\)</span> 的儿子，那么直接问 <code>s x</code> 就可以把候选点的数量减半。否则往哪个唯一的集合大小大于 <span class="math inline">\(\frac{cnt}{2}\)</span> 搜，每次往重儿子走，直到走到一个候选点 <span class="math inline">\(y\)</span>，然后询问 <code>d y</code>，这时候所有的候选点都可以与 <span class="math inline">\(y\)</span> 求距离然后判断是否还是候选点。假设之后的候选点集合的 LCA 为 <span class="math inline">\(z\)</span>，因为 <span class="math inline">\(y\)</span> 是 <span class="math inline">\(z\)</span> 走重儿子走到的，所以在极端情况下 <span class="math inline">\(z\)</span> 还有两个儿子，且大小各为 <span class="math inline">\(\frac{cnt}{3}\)</span>，所以此时问 <code>s z</code> 就可以把候选点数量减至至多 <span class="math inline">\(\frac{n}{3}\)</span>。</p><p>综上复杂度是 <span class="math inline">\(2\log_{3}n\)</span> 的，完全三叉树可以卡到此复杂度上限。</p>    </div></div><hr /><p>CF750F New Year and Finding Roots</p><p>这是一道交互题。</p><p>有一棵高度为 <span class="math inline">\(h\)</span> 的有根完全二叉树，点的编号从 <span class="math inline">\(1\)</span> 到 <span class="math inline">\(2^h-1\)</span>。每一次你可以询问某一个点在树上的邻居，现在请你使用不超过 <span class="math inline">\(16\)</span> 次询问找到树根。<span class="math inline">\(T\)</span> 组数据，<span class="math inline">\(T\leq 500,2\leq h \leq 7\)</span>。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        题解    </div>    <div class='spoiler-content'>        <p>假设当前在叶子。</p><p>直接跳到其父亲，那么我们可以直接得到当前点的深度，设为 <span class="math inline">\(dep\)</span>。</p><p>然后询问一次，然后随机在两个出边之间选一条走，如果走错了，那么就会花 <span class="math inline">\(h-dep\)</span> 次走到叶子，这时候这两条出边的另一个就是跳向父亲的。</p><p>当 <span class="math inline">\(h=7\)</span> 的时候脸足够黑的话要 <span class="math inline">\(22\)</span> 次，即主链上 <span class="math inline">\(7\)</span> 次，支链上 <span class="math inline">\(\sum_{i=1}^6i=15\)</span> 次。</p><p>不难发现越高的点不小心走错花的贡献越多。我们不希望走错，所以考虑当深度足够浅的时候 BFS——这样我们就不存在走错了。</p><p>当这个阈值为 <span class="math inline">\(3\)</span> 的时候，我们可能查询的点只有 <span class="math inline">\(17\)</span> 个，如图所示：</p><p><img src="https://ftp.bmp.ovh/imgs/2021/03/d03a9df9a7dc5731.png" /></p><p>在 <span class="math inline">\(6,12,15,17\)</span> 我们采取 DFS 的策略，在 <span class="math inline">\(4\)</span> 我们就开始 BFS。</p><p>这样一共有 <span class="math inline">\(17\)</span> 个点，看似超出了一次，但实际上这 <span class="math inline">\(17\)</span> 个点中一定有根，如果前 <span class="math inline">\(16\)</span> 次询问都没问到根，那么最后剩下的就一定是根。</p><p>实际上我们并不需要找叶子。我们随机一个点，然后随机走直到走到了叶子，这时候我们可以通过路径长度来确定一个深度比较浅的点。如上图如果我们一开始走的 <span class="math inline">\(10\sim 14\)</span>，那么我们就可以直接确定 <span class="math inline">\(6\)</span> 号点的深度 <span class="math inline">\(4\)</span>，因为深度大于 <span class="math inline">\(4\)</span> 的点走不出一个长度为 <span class="math inline">\(6\)</span> 的路径。</p><p>不难发现这样确定点不会劣于从叶子开始的做法。故 <span class="math inline">\(16\)</span> 次足够了。</p>    </div></div><hr /><p>CF1368F Lamps on a Circle</p><p>这是一道交互题。</p><p>Alice 和 Bob 在玩游戏，有 <span class="math inline">\(n\)</span> 盏灯排成一个<strong>圈</strong>，顺时针标号为 <span class="math inline">\(1\sim n\)</span>，初始所有灯都是关着的。</p><p>每轮操作为：</p><ul><li>Alice 选择一个 <span class="math inline">\(k\in [1,n]\)</span> 然后打开任意 <span class="math inline">\(k\)</span> 盏灯（可以重复打开）。</li><li>Bob 关闭一段长度为 <span class="math inline">\(k\)</span> 的连续区间的灯。</li></ul><p>Alice 可以在每轮开始时选择停止游戏，这局游戏的得分就是当前亮着的灯的数量。</p><p>Alice 想要最大化得分，Bob 想要最小化得分。</p><p>你需要使用不超过 <span class="math inline">\(10^4\)</span> 次操作达到得分上界。</p><p><span class="math inline">\(n\le 1000\)</span>。</p><div class='spoiler collapsed'>    <div class='spoiler-title'>        题解    </div>    <div class='spoiler-content'>        <p>假设我们把序列分成若干段，相邻之间有至少一个空位，那么最后的答案就是 <span class="math inline">\(\sum size-\max size\)</span>。</p><p>因为你在修改的时候，如果至少有二个段，Bob 就不能把你所有的修改都抵掉。所以你最后总会剩且只剩一段，而 Bob 也总能把你企图修改的最大的一段的变回来。</p><p>假设你要分 <span class="math inline">\(x\)</span> 段，那一定是平均分最优。所以可以直接枚举段数求该段数下的贡献。</p><p>每一轮 Alice 都可以多点亮至少一个灯，所以 <span class="math inline">\(10^4\)</span> 足够了。</p>    </div></div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;一些神题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="妙题" scheme="http://example.com/tags/%E5%A6%99%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>机房日常</title>
    <link href="http://example.com/2021/03/11/%E6%9C%BA%E6%88%BF%E6%97%A5%E5%B8%B8/"/>
    <id>http://example.com/2021/03/11/%E6%9C%BA%E6%88%BF%E6%97%A5%E5%B8%B8/</id>
    <published>2021-03-11T10:52:00.000Z</published>
    <updated>2021-03-24T13:07:22.684Z</updated>
    
    <content type="html"><![CDATA[<p>神说记录机房日常可以涨 RP。</p><p>积积积积积点点点点点阳阳阳阳阳德德德德德。</p><a id="more"></a><p>博主是老鸽子，咕咕咕咕咕。</p><p>因为博主太懒了，下文的时间是倒序的。</p><hr /><h3 id="section">2021.3.23</h3><blockquote><p>XiG: 我发现把眼镜反过来戴脑袋会特别晕<br />lsqs: 因为度数不一样啊<br />Dan: 那我先反一下，再反一下……<br />All: 那和没反有什么区别吗？</p></blockquote><h3 id="section-1">2021.3.22</h3><blockquote><p>Dan: 给个提示 <span class="math inline">\(F^2_{k-1}\equiv c \pmod {F_k}\)</span><br />All: 也就是说对于所有的 <span class="math inline">\(k\)</span>，<span class="math inline">\(F^2_{k-1}\bmod F_k\)</span> 是常数咯？<br />lsqs: 那不是求出 <span class="math inline">\(k=1\)</span> 的值就可以了吗？<br />Ima: <span class="math inline">\(k=1,2\)</span> 的值不一样诶！<br />Dan: 不是啊，对于不同的 <span class="math inline">\(k\)</span> 来说 <span class="math inline">\(c\)</span> 可能不同啊。<br />All: 那给了个啥提示啊？<br />Dan: 哦~【恍然大悟】</p></blockquote><h3 id="section-2">2021.3.21</h3><p>PETS 考试：</p><blockquote><p>Q: Do you like your school ?<br />A: Yes, of course.<br />Q: Why ?<br />...<br />A: I think ... the students are kind. XD</p></blockquote><h3 id="section-3">2021.3.11</h3><blockquote><p>Imakf: 为什么这么做最优啊？<br />Qiu: 因为这么做最优。<br />Imakf: ？<br />Qiu: 显然啊。</p></blockquote><blockquote><p>Qiu: <span class="math inline">\(n\times 2^{\frac{n}{4}}\)</span> 过 <span class="math inline">\(n\leq 100\)</span> 不随便过？</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;神说记录机房日常可以涨 RP。&lt;/p&gt;
&lt;p&gt;积积积积积点点点点点阳阳阳阳阳德德德德德。&lt;/p&gt;</summary>
    
    
    
    
    <category term="日常" scheme="http://example.com/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>c++11——范围 for 的那些事</title>
    <link href="http://example.com/2021/03/02/c-11%E2%80%94%E2%80%94%E8%8C%83%E5%9B%B4-for-%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://example.com/2021/03/02/c-11%E2%80%94%E2%80%94%E8%8C%83%E5%9B%B4-for-%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</id>
    <published>2021-03-02T10:59:27.000Z</published>
    <updated>2021-03-02T12:48:52.513Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知在 <code>c++11</code> 中支持了同 <code>python3</code> 一样的范围 <code>for</code> 语句。即 <code>for (int x : vector)</code>。</p><p>该语法结合 <code>c++11</code> 中方便的 <code>auto</code> 不定类型名使用体验极佳。</p><a id="more"></a><p>但是这样仅适用于系统提供的容器，包括但不限于 STL、数组等。如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : v) &#123; <span class="comment">/* do something */</span> &#125;</span><br><span class="line"><span class="built_in">set</span> &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : s) &#123; <span class="comment">/* do something */</span> &#125;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123; <span class="comment">/* do something */</span> &#125;</span><br></pre></td></tr></table></figure><p>在一些时候如果我们想要如此方便的遍历自己的结构体就不适用了。</p><p>这里给出一种可以实现这个效果的方法。</p><p>首先我们要知道 <code>for (:)</code> 在程序内部到底是怎么实现的。抛开数组不谈，对于一些可遍历的 STL，我们自己在遍历的时候是用迭代器从 <code>begin()</code> 到 <code>end()</code> 遍历。其实在程序内部，这种范围 <code>for</code> 有一种实现也是这样，即 <code>for (auto x = v.begin(); x != v.end(); ++x)</code>。当然具体如何实现不管，我们只需要知道，对于我们自己定义的结构体，如果能自定义一个迭代器，且该结构体有 <code>begin()</code>、<code>end()</code> 函数供迭代器遍历，那么就可以实现这个过程。</p><p>实际上迭代器用指针模拟就可以了。但是因为指针的 <code>++</code> 和 <code>*</code> 已经被定义，不适合当做这里的迭代器。但是我们可以用一个结构体来存储指针并模拟。即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">Iterator</span> &#123;</span></span><br><span class="line">  T *iter;</span><br><span class="line">  Iterator (T *p) &#123; iter = p; &#125;</span><br><span class="line">  T&amp; <span class="keyword">operator</span> *() &#123; <span class="keyword">return</span> *iter; &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> Iterator&amp; that) &#123; <span class="keyword">return</span> <span class="keyword">this</span>-&gt;iter != that.iter; &#125;</span><br><span class="line">  Iterator&amp; <span class="keyword">operator</span>++() &#123; iter = iter-&gt;next; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为了能够适用更多情况，这里的模拟迭代器适用 <code>template</code> 模板。在其中定义了一个指针来储存数据，重载的取值的 <code>*</code>，自加 <code>++</code> 和不等于，即与上文暴力实现的需求相对应。这里有两个注意项，<code>++</code> 的函数中的语句 <code>iter = iter-&gt;next</code>，这需要适用这个迭代器的结构体有 <code>next</code> 指针；<code>*</code> 的返回值必须为传引用，不然的话就不能通过这个来修改了。</p><p>考虑怎么使用它。下面给出一个边表的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edges</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> to; Edges *next;</span><br><span class="line">  Edges () &#123; to = <span class="number">0</span>, next = <span class="literal">nullptr</span>; &#125;</span><br><span class="line">  <span class="function">Iterator&lt;Edges&gt; <span class="title">begin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Iterator&lt;Edges&gt;(<span class="keyword">this</span>); &#125;;</span><br><span class="line">  <span class="function">Iterator&lt;Edges&gt; <span class="title">end</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Iterator&lt;Edges&gt;(<span class="literal">nullptr</span>); &#125;</span><br><span class="line">&#125; e[];</span><br></pre></td></tr></table></figure><p>其中 <code>to</code> 是边表要存的信息，这里不管。<code>next</code> 是连接下一个元素的指针，这里和迭代器中的 <code>next</code> 相对应。在该结构体中我们还需要定义两个函数 <code>begin()</code> 和 <code>end()</code>，这样才能遍历这个结构体。</p><p>不难发现最后 <code>Edges</code> 会连出一个链表。用范围 <code>for</code> 遍历的时候，我们传入的是开始遍历的位置。具体的，即 <code>for (auto x : e[k])</code>，这意味着它会从 <code>e[k]</code> 开始遍历，到链尾才会结束。</p><p>至此我们就可以实现用范围 <code>for</code> 遍历自定义的结构体了。</p><p>❀ ~撒花~ ❀</p><hr /><p>但事实上在算法竞赛中它的用途极少，因为似乎除了边表就没有什么东西需要遍历一个结构体了。但是或许可以写一些算法竞赛之外的东西，<del>用来装 X</del>。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;众所周知在 &lt;code&gt;c++11&lt;/code&gt; 中支持了同 &lt;code&gt;python3&lt;/code&gt; 一样的范围 &lt;code&gt;for&lt;/code&gt; 语句。即 &lt;code&gt;for (int x : vector)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;该语法结合 &lt;code&gt;c++11&lt;/code&gt; 中方便的 &lt;code&gt;auto&lt;/code&gt; 不定类型名使用体验极佳。&lt;/p&gt;</summary>
    
    
    
    
    <category term="语言" scheme="http://example.com/tags/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Euler Project</title>
    <link href="http://example.com/2021/02/22/Euler-Project/"/>
    <id>http://example.com/2021/02/22/Euler-Project/</id>
    <published>2021-02-22T11:23:11.000Z</published>
    <updated>2021-03-02T10:59:57.999Z</updated>
    
    <content type="html"><![CDATA[<p>大佬说 Euler-Project 没有刷的必要，这篇博客咕了。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;大佬说 Euler-Project 没有刷的必要，这篇博客咕了。&lt;/p&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/spoiler.css&quot; type=&quot;text/css&quot;&gt;&lt;script src=&quot;/js/spoiler.js&quot; type=&quot;te</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>快读相关</title>
    <link href="http://example.com/2021/02/18/%E5%BF%AB%E8%AF%BB%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2021/02/18/%E5%BF%AB%E8%AF%BB%E7%9B%B8%E5%85%B3/</id>
    <published>2021-02-18T08:59:46.000Z</published>
    <updated>2021-03-01T12:29:58.334Z</updated>
    
    <content type="html"><![CDATA[<p>琢磨了一下午，在输入输出流上面有了一点点自己的理解。</p><a id="more"></a><hr /><p>关于重载运算符读入结构体。</p><p>对于一个结构体，如果要读入它我们是不能直接用 <code>cin</code> 的，但是我们可以重载输入流的运算符 <code>&gt;&gt;</code>，从而使得它可以支持这个操作。</p><p>输入流 <code>cin</code> 的数据类型是 <code>istream</code>。我们不妨把 <code>&gt;&gt;</code> 看成是一个二元运算符，其左操作数是一个 <code>istream</code> 的变量，右操作数是一个需要读入的东西。</p><p>不难发现，我们有时候会连写 <code>cin</code>，如 <code>cin &gt;&gt; a &gt;&gt; b</code>，注意到 <code>&gt;&gt;</code> 是左结合的，所以可以看成是 <code>(cin &gt;&gt; a) &gt;&gt; b</code>。可以发现后面的操作符少了一个左操作数，所以 <code>cin &gt;&gt; a</code> 的返回值应该还是 <code>cin</code> 这个输入流变量。</p><p>这样我们就有了一个大致的想法，重载运算符 <code>&gt;&gt;</code>，左操作数读入 <code>istream</code>，右操作数读入 <code>structName</code>，读入完之后返回 <code>istream</code>。即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;is, structName &amp;a) &#123;</span><br><span class="line">  <span class="comment">/* Input a */</span></span><br><span class="line">  <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果把这个重载写在全局是没有问题的，但是如果写在结构体内就会 CE。</p><p>这是结构体的特性导致的，在重载二元运算符的时候，其第一个参数会默认为它自己（比如在重载矩阵乘法的时候），所以需要加上 <code>friend</code> 标识使得它合法。</p><p>即如果把重载写在全局，那么就不需要加 <code>friend</code> 标识，否则必须在重载定义前加。即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;is, structName &amp;a) &#123;</span><br><span class="line">  <span class="comment">/* Input a */</span></span><br><span class="line">  <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似的，输出也是这么重载。输出流的类型是 <code>ostream</code>，标识是 <code>cout</code>。其它规则与输入一样。下面给出一个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;os, structName a) &#123;</span><br><span class="line">  <span class="comment">/* Output a */</span></span><br><span class="line">  <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr /><p>关于重载运算符的快读。</p><p>快读用的时候不太爽，因为如果要读很多个数就要一个一个 <code>read</code>。考虑用上面的重载运算符优化。</p><p>但是如果直接重载 <code>&gt;&gt;,&lt;&lt;</code>，而且用输入输出流的 <code>istream,ostream</code> 的话，这个快读是无效的，因为 <code>c++</code> 内部的读入就是通过重载实现。</p><p>所以考虑自己定义一个读入结构体 <code>Input</code>。重定义左操作数为结构体 <code>Input</code> 右操作数为整形的 <code>&gt;&gt;</code>，然后在运算内写快读，即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Input</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> :</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">1000000</span>], *p1 = buf, *p2 = buf;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p1 == p2) p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">1000000</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">return</span> p1 == p2 ? EOF : *(p1++);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> Input&amp; <span class="keyword">operator</span> &gt;&gt; (T &amp;n) &#123;</span><br><span class="line">    n = <span class="number">0</span>; RI ch = gc(), f;</span><br><span class="line">    <span class="keyword">while</span> ((ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; ch != <span class="string">&#x27;-&#x27;</span>) ch = gc();</span><br><span class="line">    f = (ch == <span class="string">&#x27;-&#x27;</span> ? ch = gc(), <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) n = n * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = gc();</span><br><span class="line">    n *= f;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; fin;</span><br></pre></td></tr></table></figure><p>在使用的时候，<code>fin</code> 和 <code>cin</code> 是类似的用法。如果需要增加功能，如输入字符串等，就直接新定义 <code>&gt;&gt;</code> 即可。因为根据 <code>c++ template</code> 的性质，函数匹配会优先匹配实参，也就是说如果在这个结构体内还有 <code>inline Input&amp; operator &gt;&gt; (char *s) &#123;&#125;</code>，然后在输入的时候右操作数是 <code>char*</code> 的话，会优先匹配这个函数。</p><p>快输同理：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Output</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> :</span><br><span class="line">  <span class="keyword">char</span> ouf[<span class="number">1000000</span>], *P1 = ouf, *P2 = ouf;</span><br><span class="line">  <span class="keyword">char</span> Of[<span class="number">105</span>], *O1 = Of, *O2 = Of;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Flush</span><span class="params">()</span> </span>&#123; fwrite(ouf, <span class="number">1</span>, P2 - P1, <span class="built_in">stdout</span>); P2 = P1; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    *(P2++) = ch;</span><br><span class="line">    <span class="keyword">if</span> (P2 == P1 + <span class="number">1000000</span>) Flush();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> Output&amp; <span class="keyword">operator</span> &lt;&lt; (T n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) pc(<span class="string">&#x27;-&#x27;</span>), n = -n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) pc(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span> (n) *(O1++) = (n % <span class="number">10</span>) ^ <span class="number">48</span>, n /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (O1 != O2) pc(*(--O1));</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">inline</span> Output&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="keyword">char</span> ch) &#123; pc(ch); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">  ~Output() &#123; Flush(); &#125;</span><br><span class="line">&#125; fout;</span><br></pre></td></tr></table></figure><p>因为我们这里使用的是 <code>fwrite</code>，所以在程序结束的时候可能在输出数组中仍然有未输出的字符，这时候就需要 <code>Flush</code>。但是为了避免在程序结束后忘记 <code>Flush</code>，我们给 <code>Output</code> 类型的结构体一个析构函数，在程序结束析构它的时候进行 <code>Flush</code>。</p><p>还有一点就是不管是快读还是快输，函数的返回值一定要是 <code>Input/Output &amp;</code>，即传引用。不然在 <code>return *this</code> 的时候会把这个结构体复制一份返回，这不是我们期望看到的。</p><p>但是这样还是有点奇怪，因为 <code>fin</code> 和 <code>fout</code> 我们不习惯写，我们可以 <code>#define cin fin</code>，<code>#define cout fout</code>。而且可以 <code>define endl</code> 等。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;琢磨了一下午，在输入输出流上面有了一点点自己的理解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="语言" scheme="http://example.com/tags/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>「LibreOJ Round #11」Misaka Network 与求和 题解</title>
    <link href="http://example.com/2021/01/30/%E3%80%8CLibreOJ-Round-11%E3%80%8DMisaka-Network-%E4%B8%8E%E6%B1%82%E5%92%8C-%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/01/30/%E3%80%8CLibreOJ-Round-11%E3%80%8DMisaka-Network-%E4%B8%8E%E6%B1%82%E5%92%8C-%E9%A2%98%E8%A7%A3/</id>
    <published>2021-01-30T00:20:30.000Z</published>
    <updated>2021-01-30T01:01:03.549Z</updated>
    
    <content type="html"><![CDATA[<p>求 <span class="math inline">\(\sum_{i=1}^N\sum_{j=1}^Nf^k(\gcd(i,j))\)</span>，其中 <span class="math inline">\(f(x)\)</span> 表示 <span class="math inline">\(x\)</span> 的第二大质因子，每个质因子算多次，即 <span class="math inline">\(f(4)=f(6)=2\)</span>，定义 <span class="math inline">\(f(1)=0,f(Prime)=1\)</span>。</p><p>众所周知 Min_25 筛的本质是用 DP 求出所有 <span class="math inline">\(S(\lfloor\frac{n}{1}\rfloor),S(\lfloor\frac{n}{2}\rfloor)...\)</span> 这 <span class="math inline">\(2\sqrt{n}\)</span> 个值。如果可以较好的处理每个数质因子之间的关系的话，是不要求所筛函数是积性函数的，这个题就是一个典型例子。</p><a id="more"></a><p>直接设 <span class="math inline">\(f^k(n)=\sum_{d|n}g(d)\)</span>，莫比乌斯反演得到 <span class="math inline">\(g(n)=\sum_{d|n}f^k(d)\mu(\frac{n}{d})\)</span>。原式变成 <span class="math inline">\(\sum_{d=1}^ng(d)\lfloor\frac{n}{d}\rfloor^2\)</span>。</p><p>后面直接整除分块，现在就只需要求 <span class="math inline">\(g\)</span> 的前缀和。</p><p>设 <span class="math inline">\(S(n)=\sum_{i=1}^ng(i)\)</span>，那么 <span class="math inline">\(S(n)=\sum_{i=1}^n\sum_{d|n}\mu(d)f^k(\frac{n}{d})=\sum_{d=1}^n\mu(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}f^k(i)\)</span>。后面的求和式又可以整除分块。而前面求 <span class="math inline">\(\mu\)</span> 的前缀和可以用杜教筛（应该也只能用杜教筛）。</p><p>考虑怎么求 <span class="math inline">\(\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}f^k(i)\)</span>。可以发现 Min_25 筛求积性函数和的时候，每次是剥离了一个数的最小质因子。在这个题中，如果这个最小质因子恰好是次大质因子，那么就可以直接计算贡献，否则贡献就已经在之前算过了。所以我们设 <span class="math inline">\(F(n,x)\)</span> 表示 <span class="math inline">\(n\)</span> 以内所有质因子大于等于 <span class="math inline">\(Prime_x\)</span> 的合数的 <span class="math inline">\(f^k(x)\)</span> 的和，<span class="math inline">\(G(n)\)</span> 表示 <span class="math inline">\(n\)</span> 以内的质数个数。类似于 Min_25 筛的，<span class="math inline">\(F,G\)</span> 只有 <span class="math inline">\(2\sqrt{n}\)</span> 个值。</p><p><span class="math inline">\(G\)</span> 是一个经典的 DP，在此就不再赘述。</p><p>考虑求 <span class="math inline">\(F\)</span>，有 <span class="math inline">\(F(n,x)=F(n,x+1)+\sum_{e=1}\left(F(\frac{n}{p_x^e},x+1)+p_x^k\left(G(\frac{n}{p_x^e})-(x-1)\right)\right)\)</span>，即分最小质因子大于 <span class="math inline">\(x\)</span> 和最小质因子恰好为 <span class="math inline">\(x\)</span> 分别处理。</p><p>最后的真实的 <span class="math inline">\(\sum_{i=1}^nf^k(i)\)</span> 就是 <span class="math inline">\(F(n)+G(n)\)</span>。</p><p>总复杂度暂时还不会分析，但是 Min_25 的预处理是约 <span class="math inline">\(O(n^\frac{3}{4})\)</span>，真实求值的时候要用两个整除分块加杜教筛，复杂度可能会达到 <span class="math inline">\(O(n^{\frac{7}{8}})\)</span>（当然这是瞎扯）。总之能过。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILEIO(name) freopen(name<span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(name<span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, k, sq;</span><br><span class="line"><span class="keyword">int</span> Prime[MAXN], tot, miu[MAXN], Smiu[MAXN];</span><br><span class="line"><span class="keyword">char</span> Notprime[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Euler</span><span class="params">(<span class="keyword">int</span> Max)</span> </span>&#123;</span><br><span class="line">  miu[<span class="number">1</span>] = Smiu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">2</span>; i &lt;= Max; ++i) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Notprime[i])</span><br><span class="line">      Prime[++tot] = i, miu[i] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (RI j = <span class="number">1</span>; j &lt;= tot &amp;&amp; i * Prime[j] &lt;= Max; ++j) &#123;</span><br><span class="line">      Notprime[i * Prime[j]] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (i % Prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">      miu[i * Prime[j]] = miu[i] * <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Smiu[i] = Smiu[i - <span class="number">1</span>] + miu[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> DuDuDu &#123;</span><br><span class="line">  <span class="built_in">map</span> &lt;<span class="keyword">int</span>, <span class="keyword">unsigned</span> <span class="keyword">int</span>&gt; mp;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">S</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= MAXN - <span class="number">5</span>) <span class="keyword">return</span> Smiu[n];</span><br><span class="line">    <span class="keyword">if</span> (mp.count(n)) <span class="keyword">return</span> mp[n];</span><br><span class="line">    <span class="keyword">unsigned</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (RI l = <span class="number">2</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">      r = n / (n / l);</span><br><span class="line">      ans -= (r - l + <span class="number">1</span>) * S(n / l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mp[n] = ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> InitF &#123;</span><br><span class="line"><span class="comment">// g(x) = 1,            G(n, x) = \sum g(i)  i is prime || minprime[i] &gt; x</span></span><br><span class="line"><span class="comment">// f(x) = second prime, F(n, x) = \sum f(i)  i is not prime &amp;&amp; minprime[i] &gt;= x</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> <span class="keyword">const</span> MX = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">int</span> id1[MX], id2[MX], val[MX];</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> G[MX], F[MX], Ans[MX];</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Getid</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt;= sq ? id1[x] : id2[n / x]; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> a, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> re = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, a *= a)</span><br><span class="line">      <span class="keyword">if</span> (k &amp; <span class="number">1</span>) re *= a;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (RI l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">      r = n / (n / l);</span><br><span class="line">      <span class="keyword">int</span> x = (n / l);</span><br><span class="line">      <span class="keyword">if</span> (x &lt;= sq) id1[x] = ++cnt, val[cnt] = x;</span><br><span class="line">      <span class="keyword">else</span>     id2[n / x] = ++cnt, val[cnt] = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">      G[i] = val[i] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">for</span> (x = <span class="number">1</span>; Prime[x] * Prime[x] &lt;= val[<span class="number">1</span>]; ++x)</span><br><span class="line">      <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Prime[x] * Prime[x] &gt; val[i]) <span class="keyword">break</span>;</span><br><span class="line">        G[i] = G[i] - (G[Getid(val[i] / Prime[x])] - (x - <span class="number">1</span>)); <span class="comment">// (x - 1) = SumG[x - 1]</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">for</span> (; x; --x) &#123;</span><br><span class="line">      <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= cnt; ++i) &#123;</span><br><span class="line">        LL cur = Prime[x];</span><br><span class="line">        <span class="keyword">while</span> (cur * Prime[x] &lt;= val[i]) &#123;</span><br><span class="line">          F[i] += F[Getid(val[i] / cur)];</span><br><span class="line">          F[i] += (G[Getid(val[i] / cur)] - (x - <span class="number">1</span>)) * qpow(Prime[x], k); <span class="comment">// (x - 1) = SumG[x - 1]</span></span><br><span class="line">          cur *= Prime[x];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= cnt; ++i)</span><br><span class="line">      Ans[i] = F[i] + G[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">SG</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">    r = n / (n / l);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> L = DuDuDu :: S(l - <span class="number">1</span>), R = DuDuDu :: S(r);</span><br><span class="line">    ans += (R - L) * (InitF :: Ans[InitF :: Getid(n / l)]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  FILEIO(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  Euler(<span class="number">1e6</span>);</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">  sq = <span class="built_in">sqrt</span>(n);</span><br><span class="line">  InitF :: Work();</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI l = <span class="number">1</span>, r; l &lt;= n; l = r + <span class="number">1</span>) &#123;</span><br><span class="line">    r = n / (n / l);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> L = SG(l - <span class="number">1</span>), R = SG(r);</span><br><span class="line">    ans += (R - L) * (n / l) * (n / l);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// created by Daniel yuan</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     ________</span></span><br><span class="line"><span class="comment">    /        \</span></span><br><span class="line"><span class="comment">   / /      \ \</span></span><br><span class="line"><span class="comment">  / /        \ \</span></span><br><span class="line"><span class="comment">  \            /</span></span><br><span class="line"><span class="comment">   \  ______  /</span></span><br><span class="line"><span class="comment">    \________/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;求 &lt;span class=&quot;math inline&quot;&gt;\(\sum_{i=1}^N\sum_{j=1}^Nf^k(\gcd(i,j))\)&lt;/span&gt;，其中 &lt;span class=&quot;math inline&quot;&gt;\(f(x)\)&lt;/span&gt; 表示 &lt;span class=&quot;math inline&quot;&gt;\(x\)&lt;/span&gt; 的第二大质因子，每个质因子算多次，即 &lt;span class=&quot;math inline&quot;&gt;\(f(4)=f(6)=2\)&lt;/span&gt;，定义 &lt;span class=&quot;math inline&quot;&gt;\(f(1)=0,f(Prime)=1\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;众所周知 Min_25 筛的本质是用 DP 求出所有 &lt;span class=&quot;math inline&quot;&gt;\(S(\lfloor\frac{n}{1}\rfloor),S(\lfloor\frac{n}{2}\rfloor)...\)&lt;/span&gt; 这 &lt;span class=&quot;math inline&quot;&gt;\(2\sqrt{n}\)&lt;/span&gt; 个值。如果可以较好的处理每个数质因子之间的关系的话，是不要求所筛函数是积性函数的，这个题就是一个典型例子。&lt;/p&gt;</summary>
    
    
    
    
    <category term="莫比乌斯反演" scheme="http://example.com/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
    <category term="杜教筛" scheme="http://example.com/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
    <category term="Min_25 筛" scheme="http://example.com/tags/Min-25-%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>[CTSC2010] 性能优化 题解</title>
    <link href="http://example.com/2021/01/29/CTSC2010-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/01/29/CTSC2010-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E9%A2%98%E8%A7%A3/</id>
    <published>2021-01-29T08:42:20.000Z</published>
    <updated>2021-01-29T10:59:40.578Z</updated>
    
    <content type="html"><![CDATA[<p>不难发现就是求 <span class="math inline">\(A*B^C\)</span> 的长度为 <span class="math inline">\(n\)</span> 的循环卷积（这都看不出来还配做这个题？）</p><a id="more"></a><p>一种及其 naive 的想法是倍增多项式快速幂模拟循环卷积。</p><p>因为值域很小，直接用 FFT 是足够的，复杂度 <span class="math inline">\(O(n\log n\log C)\)</span>，怎么看都过不了。</p><p>我们知道 FFT 本质上就是做的循环卷积。</p><p>所以说如果我们能求出长度为 <span class="math inline">\(n\)</span> 的 DFT 和 IDFT，那么我们直接 DFT 了 <span class="math inline">\(A,B\)</span>，然后把 <span class="math inline">\(B\)</span> 的点值求个 <span class="math inline">\(C\)</span> 次方，然后再 IDFT 回去。套一个 Bluestein 就是 <span class="math inline">\(O(n\log n)\)</span> 的了。</p><p>这样复杂度是 <span class="math inline">\(O(9n\log n)\)</span> 的，有点点卡常。</p><p>但是显然有一个性质我们没有用到，就是 <span class="math inline">\(n\)</span> 能表示成若干个不超过 <span class="math inline">\(10\)</span> 的正整数的乘积。</p><p>不妨考虑普通 FFT 的本质，是把它分成奇偶两部分 <span class="math inline">\(A_0(x)=a_0x^0+a_2x^1...,A_1(x)=a_1x^0+a_2x^1...\)</span>，然后递归下去算，最后这个点的 <span class="math inline">\(A(x)=A_0(x^2)+xA_1(x^2)\)</span>。</p><p>类似的，我们可以把 <span class="math inline">\(A\)</span> 分成 <span class="math inline">\(p\)</span> 份，<span class="math inline">\(A_0,A_1...A_p\)</span>，递归下去，回溯的时候 <span class="math inline">\(O(p)\)</span> 合并。</p><p>总复杂度是 <span class="math inline">\(O(\sum np)\)</span> 的，因为 <span class="math inline">\(n\)</span> 的质因子只有 <span class="math inline">\(2,3,5,7\)</span>，所以这个复杂度是可以接受的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILEIO(name) freopen(name<span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(name<span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">1000000</span>], *p1 = buf, *p2 = buf;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p1 == p2) p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">1000000</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">return</span> p1 == p2 ? EOF : *(p1++);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">n</span>) &#123;</span></span><br><span class="line">    n = <span class="number">0</span>; RI ch = gc(), f;</span><br><span class="line">    <span class="keyword">while</span> ((ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; ch != <span class="string">&#x27;-&#x27;</span>) ch = gc();</span><br><span class="line">    f = (ch == <span class="string">&#x27;-&#x27;</span> ? ch = gc(), <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) n = n * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = gc();</span><br><span class="line">    n *= f;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">char</span> Of[<span class="number">105</span>], *O1 = Of, *O2 = Of;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">n</span>, <span class="title">char</span> <span class="title">ch</span> = &#x27;\<span class="title">n</span>&#x27;) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), n = -n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span> (n) *(O1++) = (n % <span class="number">10</span>) ^ <span class="number">48</span>, n /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (O1 != O2) <span class="built_in">putchar</span>(*(--O1));</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> IO :: read;</span><br><span class="line"><span class="keyword">using</span> IO :: print;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> MAXN = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> mod;</span><br><span class="line">LL omega[MAXN];</span><br><span class="line">LL a[MAXN], b[MAXN], t[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL k)</span> </span>&#123;</span><br><span class="line">  LL re = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, a = a * a % mod)</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) re = re * a % mod;</span><br><span class="line">  <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Prime[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Getwn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> tmp = mod - <span class="number">1</span>, cnt = <span class="number">0</span>, sq = <span class="built_in">sqrt</span>(mod - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">2</span>; i &lt;= sq; ++i)</span><br><span class="line">    <span class="keyword">if</span> (tmp % i == <span class="number">0</span>) &#123;</span><br><span class="line">      Prime[++cnt] = i;</span><br><span class="line">      <span class="keyword">while</span> (tmp % i == <span class="number">0</span>)</span><br><span class="line">        tmp /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (tmp != <span class="number">1</span>) Prime[++cnt] = tmp;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">2</span>; <span class="number">666</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (RI j = <span class="number">1</span>; flag &amp;&amp; j &lt;= cnt; ++j)</span><br><span class="line">      <span class="keyword">if</span> (qpow(i, (mod - <span class="number">1</span>) / Prime[j]) == <span class="number">1</span>)</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(LL *a, <span class="keyword">int</span> len, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">void</span>();</span><br><span class="line">  <span class="keyword">for</span> (RI i = l; i &lt;= r; ++i) t[i] = a[i];</span><br><span class="line">  <span class="keyword">int</span> p = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> (len % <span class="number">7</span> == <span class="number">0</span>) p = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">if</span> (len % <span class="number">5</span> == <span class="number">0</span>) p = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">if</span> (len % <span class="number">3</span> == <span class="number">0</span>) p = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> (len % <span class="number">2</span> == <span class="number">0</span>) p = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span> L[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;, R[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> cur = l, sz = len / p;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; p; ++i)</span><br><span class="line">    L[i] = cur, R[i] = cur - <span class="number">1</span>, cur += sz;</span><br><span class="line">  <span class="keyword">for</span> (RI i = l; i &lt;= r; ++i)</span><br><span class="line">    a[++R[(i - l) % p]] = t[i];</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; p; ++i) </span><br><span class="line">    FFT(a, sz, L[i], R[i], op);</span><br><span class="line">  <span class="keyword">for</span> (RI i = l; i &lt;= r; ++i) t[i] = a[i];</span><br><span class="line">  LL wn = (mod - <span class="number">1</span>) / len, w = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">    LL tmp = <span class="number">0</span>; a[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (RI j = (i - l) % (len / p) + l; j &lt;= r; j += sz) &#123;</span><br><span class="line">      a[i] = (a[i] + t[j] * omega[tmp] % mod) % mod;</span><br><span class="line">      tmp = (tmp + w) % (mod - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    w = (w + op * wn + mod - <span class="number">1</span>) % (mod - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  FILEIO(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n, C; read(n), read(C); mod = n + <span class="number">1</span>;</span><br><span class="line">  LL wn = Getwn(); omega[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line">    omega[i] = omega[i - <span class="number">1</span>] * wn % mod;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; n; ++i) read(a[i]);</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; n; ++i) read(b[i]);</span><br><span class="line">  FFT(a, n, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  FFT(b, n, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    a[i] = a[i] * qpow(b[i], C) % mod;</span><br><span class="line">  FFT(a, n, <span class="number">0</span>, n - <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    print(a[i] * qpow(n, mod - <span class="number">2</span>) % mod);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// created by Daniel yuan</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     ________</span></span><br><span class="line"><span class="comment">    /        \</span></span><br><span class="line"><span class="comment">   / /      \ \</span></span><br><span class="line"><span class="comment">  / /        \ \</span></span><br><span class="line"><span class="comment">  \            /</span></span><br><span class="line"><span class="comment">   \  ______  /</span></span><br><span class="line"><span class="comment">    \________/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;不难发现就是求 &lt;span class=&quot;math inline&quot;&gt;\(A*B^C\)&lt;/span&gt; 的长度为 &lt;span class=&quot;math inline&quot;&gt;\(n\)&lt;/span&gt; 的循环卷积（这都看不出来还配做这个题？）&lt;/p&gt;</summary>
    
    
    
    
    <category term="循环卷积" scheme="http://example.com/tags/%E5%BE%AA%E7%8E%AF%E5%8D%B7%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>[HNOI2019] 白兔之舞 题解</title>
    <link href="http://example.com/2021/01/29/HNOI2019-%E7%99%BD%E5%85%94%E4%B9%8B%E8%88%9E-%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/01/29/HNOI2019-%E7%99%BD%E5%85%94%E4%B9%8B%E8%88%9E-%E9%A2%98%E8%A7%A3/</id>
    <published>2021-01-29T03:28:58.000Z</published>
    <updated>2021-01-29T08:44:55.293Z</updated>
    
    <content type="html"><![CDATA[<p><del>白兔虐我千百遍，我待白兔如初恋。</del></p><p>随着单位根反演的普及，这道题或许会逐渐成为模板。</p><a id="more"></a><p>设 <span class="math inline">\(F_i\)</span> 表示走 <span class="math inline">\(i\)</span> 步到 <span class="math inline">\(y\)</span> 得到方案，那么显然有： <span class="math display">\[F_i={L \choose i}A^i[x][y]\]</span> 其中 <span class="math inline">\(A\)</span> 矩阵是给出的邻接矩阵 <span class="math inline">\(w\)</span>。（如果这个都不会还学什么单位根反演？）</p><p>设 <span class="math inline">\(G_x\)</span> 表示表示最终的 <span class="math inline">\(x\)</span> 的答案，那么显然 <span class="math inline">\(G_x=\sum_iF_i[i\text{ mod }k=x]\)</span>。括号内的内容等价于 <span class="math inline">\(k|i-x\)</span>。</p><p>直接套单位根反演，就有 <span class="math inline">\(G_x=\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-xj}\sum_{i=0}^L{L \choose i}A^i[x][y]\omega_k^{ij}\)</span>。</p><p>不难发现后面一堆就是 <span class="math inline">\((A\omega_k^j+I)^L[x][y]\)</span>，直接矩阵快速幂算即可，设算出来的结果为 <span class="math inline">\(H_j\)</span>，那么原式就等于 <span class="math inline">\(\frac{1}{k}\sum_{j=0}^{k-1}\omega_k^{-xj}H_j\)</span>。</p><p>按照 Bluestein 的套路，把 <span class="math inline">\(-xj\)</span> 拆成 <span class="math inline">\({j \choose 2}+{x \choose 2}-{j+x \choose 2}\)</span>，那么原式就为 <span class="math inline">\(\frac{1}{k}\omega_k^{x\choose 2}\sum_{j=0}^{k-1}\omega_k^{j \choose 2}H_j\cdot\omega_k^{j+x\choose 2}\)</span>，不难发现右边是一个减法卷积，直接任意模数 FFT 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILEIO(name) freopen(name<span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(name<span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> MAXN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line">LL n, k, L, x, y, mod;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">qpow</span><span class="params">(LL a, LL k)</span> </span>&#123;</span><br><span class="line">  LL re = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, a = a * a % mod)</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) re = re * a % mod;</span><br><span class="line">  <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Prime[<span class="number">105</span>];</span><br><span class="line"><span class="function">LL <span class="title">Getwn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>, tmp = mod - <span class="number">1</span>, sq = <span class="built_in">sqrt</span>(mod);</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">2</span>; i &lt;= sq; ++i)</span><br><span class="line">    <span class="keyword">if</span> (tmp % i == <span class="number">0</span>) &#123;</span><br><span class="line">      Prime[++cnt] = i;</span><br><span class="line">      <span class="keyword">while</span> (tmp % i == <span class="number">0</span>)</span><br><span class="line">        tmp /= i;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (tmp != <span class="number">1</span>) Prime[++cnt] = tmp;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">2</span>; <span class="number">666</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (RI j = <span class="number">1</span>; flag &amp;&amp; j &lt;= cnt; ++j)</span><br><span class="line">      <span class="keyword">if</span> (qpow(i, (mod - <span class="number">1</span>) / Prime[j]) == <span class="number">1</span>)</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">return</span> qpow(i, (mod - <span class="number">1</span>) / k);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span> &#123;</span></span><br><span class="line">  LL a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">  Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> Matrix &amp;A) &#123;</span><br><span class="line">    Matrix re;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">      <span class="keyword">for</span> (RI j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">        re.a[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (RI k = <span class="number">0</span>; k &lt; n; ++k)</span><br><span class="line">          re.a[i][j] += a[i][k] * A.a[k][j];</span><br><span class="line">        re.a[i][j] %= mod;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">  &#125;</span><br><span class="line">  Matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> LL &amp;A) &#123;</span><br><span class="line">    Matrix re;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">      <span class="keyword">for</span> (RI j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        re.a[i][j] = a[i][j] * A % mod;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">  &#125;</span><br><span class="line">  Matrix <span class="keyword">operator</span> + (<span class="keyword">const</span> Matrix &amp;A) &#123;</span><br><span class="line">    Matrix re;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">      <span class="keyword">for</span> (RI j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">        re.a[i][j] = (a[i][j] + A.a[i][j]) % mod;</span><br><span class="line">    <span class="keyword">return</span> re;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; E, I, F;</span><br><span class="line"><span class="function">Matrix <span class="title">Matrixqpow</span><span class="params">(Matrix a, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  Matrix re; re = I;</span><br><span class="line">  <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, a = a * a)</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) re = re * a;</span><br><span class="line">  <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line">LL A[MAXN], B[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> FuckFuckTmd &#123;</span><br><span class="line">  <span class="keyword">double</span> <span class="keyword">const</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line">  <span class="keyword">int</span> <span class="keyword">const</span> M = <span class="number">32767</span>;</span><br><span class="line">  <span class="keyword">int</span> r[MAXN];</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Complex</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> a, b;</span><br><span class="line">    Complex (<span class="keyword">double</span> _a = <span class="number">0</span>, <span class="keyword">double</span> _b = <span class="number">0</span>) &#123; a = _a, b = _b; &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp;A) &#123; <span class="keyword">return</span> Complex(a + A.a, b + A.b); &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp;A) &#123; <span class="keyword">return</span> Complex(a - A.a, b - A.b); &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> * (<span class="keyword">const</span> Complex &amp;A) &#123; <span class="keyword">return</span> Complex(a * A.a - b * A.b, a * A.b + b * A.a); &#125;</span><br><span class="line">  &#125; omega[MAXN], A[MAXN], B[MAXN], C[MAXN], D[MAXN], F[MAXN], G[MAXN], H[MAXN];</span><br><span class="line">  LL RE[MAXN];</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FFT</span><span class="params">(Complex *a, <span class="keyword">int</span> len, <span class="keyword">int</span> op)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">      <span class="keyword">if</span> (r[i] &gt; i)</span><br><span class="line">        swap(a[i], a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">2</span>; i &lt;= len; i &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> wn = len / i;</span><br><span class="line">      <span class="keyword">for</span> (RI j = <span class="number">0</span>; j &lt; len; j += i) &#123;</span><br><span class="line">        <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (RI k = j; k &lt; j + i / <span class="number">2</span>; ++k) &#123;</span><br><span class="line">          Complex x = a[k], y = a[k + i / <span class="number">2</span>] * omega[w];</span><br><span class="line">          a[k] = x + y;</span><br><span class="line">          a[k + i / <span class="number">2</span>] = x - y;</span><br><span class="line">          w = (w + op * wn + len) % len;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">FUCKFFT</span><span class="params">(LL *a, <span class="keyword">int</span> lena, LL *b, <span class="keyword">int</span> lenb)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; lena; ++i) &#123;</span><br><span class="line">      A[i].a = (a[i] &gt;&gt; <span class="number">15</span>) &amp; M;</span><br><span class="line">      B[i].a = a[i] &amp; M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; lenb; ++i) &#123;</span><br><span class="line">      C[i].a = (b[i] &gt;&gt; <span class="number">15</span>) &amp; M;</span><br><span class="line">      D[i].a = b[i] &amp; M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">1</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (len &lt; lena + lenb - <span class="number">1</span>)</span><br><span class="line">      len &lt;&lt;= <span class="number">1</span>, ++cnt;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; len; ++i)</span><br><span class="line">      r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) &lt;&lt; (cnt - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      <span class="keyword">double</span> deg = <span class="number">2.0</span> * PI * i / len;</span><br><span class="line">      omega[i] = Complex(<span class="built_in">cos</span>(deg), <span class="built_in">sin</span>(deg));</span><br><span class="line">    &#125;</span><br><span class="line">    FFT(A, len, <span class="number">1</span>), FFT(B, len, <span class="number">1</span>);</span><br><span class="line">    FFT(C, len, <span class="number">1</span>), FFT(D, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      F[i] = A[i] * C[i];</span><br><span class="line">      G[i] = A[i] * D[i] + B[i] * C[i];</span><br><span class="line">      H[i] = B[i] * D[i];</span><br><span class="line">    &#125;</span><br><span class="line">    FFT(F, len, <span class="number">-1</span>), FFT(G, len, <span class="number">-1</span>), FFT(H, len, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">      RE[i] = LL(F[i].a / len + <span class="number">0.5</span>) % mod * (M + <span class="number">1</span>) % mod * (M + <span class="number">1</span>) % mod;</span><br><span class="line">      RE[i] = (RE[i] + LL(G[i].a / len + <span class="number">0.5</span>) % mod * (M + <span class="number">1</span>) % mod) % mod;</span><br><span class="line">      RE[i] = (RE[i] + LL(H[i].a / len + <span class="number">0.5</span>) % mod) % mod;</span><br><span class="line">      RE[i] = (RE[i] % mod + mod) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//LL ans[MAXN];</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  FILEIO(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; L &gt;&gt; x &gt;&gt; y &gt;&gt; mod; --x, --y;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    <span class="keyword">for</span> (RI j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; E.a[i][j];</span><br><span class="line">      I.a[i][j] = (i == j);</span><br><span class="line">    &#125;</span><br><span class="line">  LL wn = Getwn(), w = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">int</span> lenF = k, lenG = <span class="number">2</span> * k - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; lenF; ++i) &#123;</span><br><span class="line">    F = E * w + I;</span><br><span class="line">    F = Matrixqpow(F, L);</span><br><span class="line">    A[i] = F.a[x][y];</span><br><span class="line">    A[i] = A[i] * qpow(wn, <span class="number">1l</span>l * i * (i - <span class="number">1</span>) / <span class="number">2</span>) % mod;</span><br><span class="line">    w = w * wn % mod;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; lenG; ++i)</span><br><span class="line">    B[i] = qpow(wn, k - <span class="number">1l</span>l * i * (i - <span class="number">1</span>) / <span class="number">2</span> % k);</span><br><span class="line">  <span class="comment">// for (RI i = 0; i &lt; lenF; ++i)</span></span><br><span class="line">  <span class="comment">//   for (RI j = i; j &lt; lenG; ++j)</span></span><br><span class="line">  <span class="comment">//     ans[j - i] = (ans[j - i] + A[i] * B[j] % mod) % mod;</span></span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>, j = lenG - <span class="number">1</span>; i &lt; j; ++i, --j)</span><br><span class="line">    swap(B[i], B[j]);</span><br><span class="line">  FuckFuckTmd :: FUCKFFT(A, lenF, B, lenG);</span><br><span class="line">  LL *ans = FuckFuckTmd :: RE;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">    LL val = ans[lenG - <span class="number">1</span> - i];</span><br><span class="line">    val = val * qpow(k, mod - <span class="number">2</span>) % mod * qpow(wn, <span class="number">1l</span>l * i * (i - <span class="number">1</span>) / <span class="number">2</span>) % mod;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// created by Daniel yuan</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     ________</span></span><br><span class="line"><span class="comment">    /        \</span></span><br><span class="line"><span class="comment">   / /      \ \</span></span><br><span class="line"><span class="comment">  / /        \ \</span></span><br><span class="line"><span class="comment">  \            /</span></span><br><span class="line"><span class="comment">   \  ______  /</span></span><br><span class="line"><span class="comment">    \________/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;del&gt;白兔虐我千百遍，我待白兔如初恋。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;随着单位根反演的普及，这道题或许会逐渐成为模板。&lt;/p&gt;</summary>
    
    
    
    
    <category term="单位根反演" scheme="http://example.com/tags/%E5%8D%95%E4%BD%8D%E6%A0%B9%E5%8F%8D%E6%BC%94/"/>
    
    <category term="循环卷积" scheme="http://example.com/tags/%E5%BE%AA%E7%8E%AF%E5%8D%B7%E7%A7%AF/"/>
    
    <category term="多项式" scheme="http://example.com/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ3328 PYXFIB 题解</title>
    <link href="http://example.com/2021/01/28/BZOJ3328-PYXFIB-%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/01/28/BZOJ3328-PYXFIB-%E9%A2%98%E8%A7%A3/</id>
    <published>2021-01-28T12:26:26.000Z</published>
    <updated>2021-01-28T12:51:28.872Z</updated>
    
    <content type="html"><![CDATA[<p>好像网上没有这么做的题解，所以就写个吧。</p><a id="more"></a><p>直接单位根反演，就有： <span class="math display">\[\frac{1}{k}\sum_{j=0}^{k-1}\sum_{i=0}^n{n \choose i}(\omega_k^j)^iF_i\]</span> 正常的做法是把斐波那契数用矩阵表示，然后用二项式定理。</p><p>考虑直接头铁用通项公式展开斐波那契数，就有 <span class="math display">\[\frac{1}{\sqrt{5}k}\sum_{j=0}^{k-1}\left(\frac{1+\sqrt{5}}{2}(1+\frac{1+\sqrt{5}}{2}\omega_k^j)^n-\frac{1-\sqrt{5}}{2}(1+\frac{1-\sqrt{5}}{2}\omega_k^j)^n\right)\]</span> 在模意义下可能没有 <span class="math inline">\(5\)</span> 的二次剩余，故考虑扩域，把数表示成 <span class="math inline">\(a+b\sqrt{5}\)</span> 的形式。</p><p>定义一下扩域后数的加减乘除然后直接做即可。在这里除法的本质是求逆元，也就是求 <span class="math inline">\(c+d\sqrt{5}\)</span> 使得它和 <span class="math inline">\(a+b\sqrt{5}\)</span> 乘起来为 <span class="math inline">\(1\)</span>。</p><p>不过需要注意的是，当 <span class="math inline">\(P=5\)</span> 的时候，<span class="math inline">\(\frac{1}{\sqrt{5}k}\)</span> 没有逆元，这样就会 WA，考虑特殊处理一下。</p><p>可以发现 <span class="math inline">\(\frac{1}{\sqrt{5}k}\)</span> 表示成 <span class="math inline">\(a+b\sqrt{5}\)</span> 的形式的时候 <span class="math inline">\(a=0\)</span>，那么当 <span class="math inline">\(P\not=5\)</span> 的时候它的逆元 <span class="math inline">\(a=0\)</span>，既然这样，后面的式子求出来的 <span class="math inline">\(a\)</span> 也会等于 <span class="math inline">\(0\)</span>。</p><p>所以我们根本没有必要在这一步把这个复数求逆，直接把 <span class="math inline">\(k\)</span> 求逆乘上后面的式子求出来的 <span class="math inline">\(b\)</span> 即可。</p><p>常数可能会比矩阵乘法的做法小。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;好像网上没有这么做的题解，所以就写个吧。&lt;/p&gt;</summary>
    
    
    
    
    <category term="单位根反演" scheme="http://example.com/tags/%E5%8D%95%E4%BD%8D%E6%A0%B9%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>单位根反演学习笔记</title>
    <link href="http://example.com/2021/01/28/%E5%8D%95%E4%BD%8D%E6%A0%B9%E5%8F%8D%E6%BC%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2021/01/28/%E5%8D%95%E4%BD%8D%E6%A0%B9%E5%8F%8D%E6%BC%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-01-28T08:39:39.000Z</published>
    <updated>2021-01-28T09:16:24.028Z</updated>
    
    <content type="html"><![CDATA[<p>以下等式被称作单位根反演：</p><a id="more"></a><p><span class="math display">\[[n|k]=\frac{1}{n}\sum_{i=0}^{n-1}\omega_n^{ik}\]</span> 其中 <span class="math inline">\(\omega_n\)</span> 表示在所求域内的 <span class="math inline">\(n\)</span> 次单位根。<span class="math inline">\(n\)</span> 次单位根的定义是，若 <span class="math inline">\(\omega_n\)</span> 是 <span class="math inline">\(n\)</span> 次单位根当且仅当 <span class="math inline">\(\omega_n^0,\omega_n^1...\omega_n^{n-1}\)</span> 互不相同，且 <span class="math inline">\(\omega_n^0=\omega_n^n\)</span>。一般来说所求域会是模大质数 <span class="math inline">\(P\)</span> 的同余域，所以若设 <span class="math inline">\(g\)</span> 为 <span class="math inline">\(P\)</span> 的原根，那么在该域下，<span class="math inline">\(n\)</span> 次单位根为 <span class="math inline">\(g^{\frac{P-1}{n}}\)</span>。</p><p>关于单位根，有个比较显然的等式，即 <span class="math inline">\(\omega_n^k=\omega_n^{k\text{ mod }n}\)</span>。</p><p>基于上面的等式，就有了一种单位根反演证明方法：</p><ol type="1"><li>若 <span class="math inline">\([n|k]\)</span> 那么 <span class="math inline">\(\omega_n^{ik}=1\)</span>，所以右边的式子算出来就是 <span class="math inline">\(1\)</span>。</li><li>反之，<span class="math inline">\(\sum_{i=0}^{n-1}\omega_n^{ik}=\sum_{i=0}^{n-1}(\omega_n^k)^i=\frac{1-\omega_n^n}{1-\omega_n^k}\)</span>，因为前提，分母一定不是 <span class="math inline">\(0\)</span>，而分子为 <span class="math inline">\(0\)</span>，所以整体为 <span class="math inline">\(0\)</span>。</li></ol><p>故得证。</p><hr /><p>虽然单位根反演看上去特别简单，但是在用的时候其实很难把一个式子和单位根反演联系起来，这就需要多加练习。</p><p>举个栗子：<a href="https://loj.ac/p/6485">LOJ #6485 LJJ 学二项式定理</a>。 <span class="math display">\[\begin{aligned}&amp;\sum_{i=0}^n{n \choose i}s^ia_{i\text{ mod }4}\\=&amp;\sum_{i=0}^n{n\choose i}s^i\sum_{j=0}^3[4|i-j]a_j\\=&amp;\sum_{i=0}^n{n\choose i}s^i\sum_{j=0}^3a_j\frac{1}{4}\sum_{k=0}^3\omega_4^{(i-j)k}\\=&amp;\frac{1}{4}\sum_{j=0}^3a_j\sum_{k=0}^3\sum_{i=0}^n{n\choose i}s^i\omega_4^{ik-jk}\\=&amp;\frac{1}{4}\sum_{j=0}^3a_j\sum_{k=0}^3\omega_4^{-jk}\sum_{i=0}^n{n\choose i}s^i\omega_4^{ik}\\=&amp;\frac{1}{4}\sum_{j=0}^3a_j\sum_{k=0}^3\omega_4^{-jk}(1+s\omega_4^k)^n\end{aligned}\]</span> 当然，直接看推式子的话，这道题就浪费了，所以接下来梳理一下解题思路。</p><p>首先直接求和肯定是不好求的，因为后面的下标取模非常麻烦，但是我们可以把后面的模枚举出来，就有了第一步。</p><p>之后直接套用单位根反演，并且可以发现组合数和 <span class="math inline">\(s^i\)</span> 很像二项式定理，所以对单位根的指数进行一些分裂等处理，使得所有和 <span class="math inline">\(i\)</span> 有关的项全部被分离，并且把带 <span class="math inline">\(i\)</span> 的项通过二项式定理合并。</p><p>最后就只需要模拟求和式了，复杂度 <span class="math inline">\(O(9\times \log n)\)</span>。</p><hr /><p>其实很多单位根反演都是把模或者除之类的算术暴力展开，得到一个符合单位根反演的式子之后直接反演，然后通过对单位根指数的分裂与合并，把单位根的各项分配到合适的地方去，之后就通过一些数学方法合并一些式子，使得求和式变得简单。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;以下等式被称作单位根反演：&lt;/p&gt;</summary>
    
    
    
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
    <category term="反演" scheme="http://example.com/tags/%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>[NOI2016] 循环之美 题解</title>
    <link href="http://example.com/2021/01/26/NOI2016-%E5%BE%AA%E7%8E%AF%E4%B9%8B%E7%BE%8E-%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/01/26/NOI2016-%E5%BE%AA%E7%8E%AF%E4%B9%8B%E7%BE%8E-%E9%A2%98%E8%A7%A3/</id>
    <published>2021-01-26T13:15:59.000Z</published>
    <updated>2021-01-28T08:40:30.738Z</updated>
    
    <content type="html"><![CDATA[<p>手玩发现，一个极简分数，如果其分母和进制的 <span class="math inline">\(\gcd\)</span> 为 <span class="math inline">\(1\)</span>，那么就符合题意。</p><p>那么就变成了求 <span class="math inline">\(\sum_{i=1}^n\sum_{j=1}^m[(j,k)=1][(i,j)=1]\)</span>。</p><p>其实这个求和式的化简并不难，只是需要多发现式子之间的联系。</p><a id="more"></a><h4 id="展开-ij1">1. 展开 <span class="math inline">\([(i,j)=1]\)</span>。</h4><p><span class="math display">\[\begin{aligned}&amp;\sum_{i=1}^n\sum_{j=1}^m[(j,k)=1][(i,j)=1]\\=&amp;\sum_{t=1}^n\mu(t)\lfloor\frac{n}{t}\rfloor\sum_{j=1}^{\lfloor\frac{m}{t}\rfloor}[(tj,k)=1]\\=&amp;\sum_{t=1}^n\mu(t)\lfloor\frac{n}{t}\rfloor[(t,k)=1]\sum_{a|k}\mu(a)\lfloor\frac{m}{ta}\rfloor\\=&amp;\sum_{a|k}\mu(a)\sum_{t=1}^n\mu(t)\lfloor\frac{n}{t}\rfloor[(t,k)=1]\lfloor\frac{m}{ta}\rfloor\end{aligned}\]</span></p><p>后面显然可以整除分块。但是分块后需要求 <span class="math inline">\(\sum_{i=1}^n\mu(i)[(i,k)=1]\)</span>。到在这里博主就不会了，因为这个式子看起来不可推。但是实际上设这个为 <span class="math inline">\(g(n,k)\)</span>，稍加整理： <span class="math display">\[\begin{aligned}&amp;\sum_{i=1}^n\mu(i)[(i,k)=1]\\=&amp;\sum_{a|k}\mu(a)\sum_{i=1}^{\lfloor\frac{n}{a}\rfloor}\mu(ia)\\=&amp;\sum_{a|k}\mu^2(a)\sum_{i=1}^{\lfloor\frac{n}{a}\rfloor}\mu(i)[(i,a)=1]\\=&amp;\sum_{a|k}\mu^2(a)g(\lfloor\frac{n}{a}\rfloor,a)\end{aligned}\]</span> 这个式子暴力推，<span class="math inline">\(g\)</span> 到边界亚线性筛。</p><h4 id="展开-ik1">2. 展开 <span class="math inline">\([(i,k)=1]\)</span>。</h4><p>博主一开始没有想到展开这个，但是这样推相对简单。</p><p><span class="math display">\[\begin{aligned}&amp;\sum_{i=1}^n\sum_{j=1}^m[(j,k)=1][(i,j)=1]\\=&amp;\sum_{a|k}\mu(a)\sum_{i=1}^n\sum_{j=1}^{\lfloor\frac{m}{a}\rfloor}[(i,ja)=1]\\=&amp;\sum_{a|k}\mu(a)\sum_{i=1}^n\sum_{j=1}^{\lfloor\frac{m}{a}\rfloor}[(i,j)=1][(i,a)=1]\end{aligned}\]</span></p><p>可以发现最后的式子和第一个式子很像，式子答案为 <span class="math inline">\(f(n,m,k)\)</span>，那么就有 <span class="math inline">\(f(n,m,k)=\sum_{a|k}f(\lfloor\frac{m}{a}\rfloor,n,a)\)</span>。到边界直接算即可。</p><hr /><p>可以发现对不同的地方展开，有两个截然不同的结果，虽然最后都可以得到正确答案，但是会有不同的推导难度。</p><p>而不管用什么，最重要的部分都是等效替代，也就是说把某个求和式设成函数 <span class="math inline">\(f\)</span>，然后在推导中注意看式子中有没有重新得到 <span class="math inline">\(f\)</span>，然后就可以得到 <span class="math inline">\(f\)</span> 之间的递推式了。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;手玩发现，一个极简分数，如果其分母和进制的 &lt;span class=&quot;math inline&quot;&gt;\(\gcd\)&lt;/span&gt; 为 &lt;span class=&quot;math inline&quot;&gt;\(1\)&lt;/span&gt;，那么就符合题意。&lt;/p&gt;
&lt;p&gt;那么就变成了求 &lt;span class=&quot;math inline&quot;&gt;\(\sum_{i=1}^n\sum_{j=1}^m[(j,k)=1][(i,j)=1]\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;其实这个求和式的化简并不难，只是需要多发现式子之间的联系。&lt;/p&gt;</summary>
    
    
    
    
    <category term="莫比乌斯反演" scheme="http://example.com/tags/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    
  </entry>
  
  <entry>
    <title>[NOI2019] 序列 题解</title>
    <link href="http://example.com/2021/01/26/NOI2019-%E5%BA%8F%E5%88%97-%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/01/26/NOI2019-%E5%BA%8F%E5%88%97-%E9%A2%98%E8%A7%A3/</id>
    <published>2021-01-26T01:11:10.000Z</published>
    <updated>2021-01-26T02:51:49.752Z</updated>
    
    <content type="html"><![CDATA[<p>简单学习了模拟费用流之后一直有点迷糊，后来在交流中似乎悟到了些什么。</p><p>能推出这道题挺开心的，而且对模拟费用流有了更进一步的理解。</p><a id="more"></a><p>首先这个题目很容易建出费用流的图。</p><p>考虑每次增广都会新增一对 <span class="math inline">\(a,b\)</span>，那么我们就需要起点向 <span class="math inline">\(\{a\}\)</span> 连边，<span class="math inline">\(\{b\}\)</span> 向终点连边，这样一条路径就一定会对应一对 <span class="math inline">\(a,b\)</span>。</p><p>对于 <span class="math inline">\(K\)</span> 个下标的限制，直接对起点拆点。</p><p>而对于至少的限制，我们把其转化成最多，即最多 <span class="math inline">\(K-L\)</span> 对 <span class="math inline">\(c,d\)</span> 不相同，这样也可以用一条流量为 <span class="math inline">\(K-L\)</span> 的边表示。</p><p>而对于相同和不同的限制，如果相同那么显然可以直接流，即 <span class="math inline">\(a_i\)</span> 向 <span class="math inline">\(b_i\)</span> 连边。而如果不同，那么就需要通过上一行的边，所以建立两个辅助节点 <span class="math inline">\(L,R\)</span>，<span class="math inline">\(L\)</span> 向 <span class="math inline">\(R\)</span> 连 <span class="math inline">\(K-L\)</span> 的边，然后 <span class="math inline">\(\{a\}\)</span> 向 <span class="math inline">\(L\)</span> 连边，<span class="math inline">\(R\)</span> 向 <span class="math inline">\(\{b\}\)</span> 连边。</p><p>因为我们在增广的同时要保证最大，所以在所有起点向 <span class="math inline">\(\{a\}\)</span> 的边上和 <span class="math inline">\(\{b\}\)</span> 向终点的边上加上他们的权值的费用，其它边的费用为 <span class="math inline">\(0\)</span>，这样就有了一个费用流的模型。</p><p><a href="https://imgchr.com/i/sXiJIJ"><img src="https://s3.ax1x.com/2021/01/26/sXiJIJ.png" /></a></p><p>直接费用流肯定过不了，考虑模拟费用流。</p><p>我们可以发现一共有六种增广方式。 <span class="math display">\[\begin{aligned}&amp;S \rightarrow A \rightarrow B \rightarrow T\\&amp;S \rightarrow A \rightarrow L \rightarrow R \rightarrow B \rightarrow T\\&amp;S \rightarrow A_1 \rightarrow L \rightarrow A_2 \rightarrow B_2 \rightarrow T\\&amp;S \rightarrow A_1 \rightarrow B_1 \rightarrow R \rightarrow B_2 \rightarrow T\\&amp;S \rightarrow A_1 \rightarrow L \rightarrow A_2 \rightarrow B_2 \rightarrow R \rightarrow B_3 \rightarrow T\\&amp;S \rightarrow A_1 \rightarrow B_1 \rightarrow R \rightarrow B_2 \rightarrow A_2 \rightarrow L \rightarrow A_3 \rightarrow B_3 \rightarrow T\\\end{aligned}\]</span> 在有下标的路径中，下标相同的点的位置相同。（如 <span class="math inline">\(A_1\)</span> 和 <span class="math inline">\(B_1\)</span> 的）</p><p>可以发现其中只有路径 <span class="math inline">\(2\)</span> 会经过 <span class="math inline">\(L\rightarrow R\)</span> 的边，所以我们可以先贪心把路径 <span class="math inline">\(2\)</span> 走完，然后再增广 <span class="math inline">\(K-L\)</span> 次。</p><p>考虑剩下的增广，设 <span class="math inline">\(P\)</span> 为没选的点的集合，<span class="math inline">\(Q\)</span> 为选了的点，且当前状态是用 <span class="math inline">\(L\rightarrow R\)</span> 边形成的集合，<span class="math inline">\(O\)</span> 为选了的点，且当前状态是用 <span class="math inline">\(A_i\rightarrow B_i\)</span> 的边形成的集合。</p><p>那么对于剩下的五种路径，我们有以下限制： <span class="math display">\[\begin{aligned}A, B   \in &amp;P\\\text{}\\A_1, B_2 \in &amp;P; &amp;A_2     \in &amp;Q\\A_1, B_2 \in &amp;P; &amp;B_1     \in &amp;Q\\A_1, B_3 \in &amp;P; &amp;A_2, B_2 \in &amp;Q\\A_1, B_3 \in &amp;P; &amp;B_1, A_3 \in &amp;Q; &amp;A_2, B_2 \in O\end{aligned}\]</span> 然后在增广完之后，上面的五条路径分别会出现这样的改变：</p><table><colgroup><col style="width: 12%" /><col style="width: 14%" /><col style="width: 14%" /><col style="width: 14%" /><col style="width: 14%" /><col style="width: 14%" /><col style="width: 14%" /></colgroup><thead><tr class="header"><th></th><th><span class="math inline">\(\text{insert } O\)</span></th><th><span class="math inline">\(\text{delete } O\)</span></th><th><span class="math inline">\(\text{insert } Q\)</span></th><th><span class="math inline">\(\text{delete } Q\)</span></th><th><span class="math inline">\(\text{insert }P\)</span></th><th><span class="math inline">\(\text{delete }P\)</span></th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(\text{path 1}\)</span></td><td><span class="math inline">\(A,B\)</span></td><td></td><td></td><td></td><td></td><td><span class="math inline">\(A,B\)</span></td></tr><tr class="even"><td><span class="math inline">\(\text{path 3}\)</span></td><td><span class="math inline">\(A_2,B_2\)</span></td><td></td><td><span class="math inline">\(A_1\)</span></td><td><span class="math inline">\(A_2\)</span></td><td></td><td><span class="math inline">\(A_1,B_2\)</span></td></tr><tr class="odd"><td><span class="math inline">\(\text{path 4}\)</span></td><td><span class="math inline">\(A_1,B_1\)</span></td><td></td><td><span class="math inline">\(B_2\)</span></td><td><span class="math inline">\(B_1\)</span></td><td></td><td><span class="math inline">\(A_1,B_2\)</span></td></tr><tr class="even"><td><span class="math inline">\(\text{path 5}\)</span></td><td><span class="math inline">\(A_2,B_2\)</span></td><td></td><td><span class="math inline">\(A_2,B_2\)</span></td><td><span class="math inline">\(A_1,B_3\)</span></td><td></td><td><span class="math inline">\(A_1,B_3\)</span></td></tr><tr class="odd"><td><span class="math inline">\(\text{path 6}\)</span></td><td><span class="math inline">\(A_1,B_1,A_3,B_3\)</span></td><td><span class="math inline">\(A_2,B_2\)</span></td><td><span class="math inline">\(B_1,A_3\)</span></td><td><span class="math inline">\(A_2,B_2\)</span></td><td></td><td><span class="math inline">\(A_1,B_3\)</span></td></tr></tbody></table><p>可以发现改变量并不多。</p><p>那么我们用 <span class="math inline">\(5\)</span> 个可删堆，分别维护：<span class="math inline">\(A,B\)</span> 都在 <span class="math inline">\(P\)</span> 的和的最大值，<span class="math inline">\(A\)</span> 在 <span class="math inline">\(P\)</span> 的最大值，<span class="math inline">\(B\)</span> 在 <span class="math inline">\(P\)</span> 的最大值，<span class="math inline">\(A\)</span> 在 <span class="math inline">\(P\)</span> 且 <span class="math inline">\(B\)</span> 在 <span class="math inline">\(Q\)</span> 的最大的 <span class="math inline">\(A\)</span> 的权值，<span class="math inline">\(A\)</span> 在 <span class="math inline">\(Q\)</span> 且 <span class="math inline">\(B\)</span> 在 <span class="math inline">\(P\)</span> 的最大的 <span class="math inline">\(B\)</span> 的权值。并同时维护 <span class="math inline">\(A,B\)</span> 都在 <span class="math inline">\(Q\)</span>，<span class="math inline">\(A,B\)</span> 都在 <span class="math inline">\(O\)</span> 的对数，就可以通过这五个可删堆的拼凑，得到上述五条路径的最大值，修改的时候由于修改量很少，暴力更新可删堆即可。</p><p>总复杂度 <span class="math inline">\(O(\sum n\log \max\{n\})\)</span>。</p><p>贴个代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILEIO(name) freopen(name<span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(name<span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> IO &#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">1000000</span>], *p1 = buf, *p2 = buf;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p1 == p2) p2 = (p1 = buf) + fread(buf, <span class="number">1</span>, <span class="number">1000000</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">return</span> p1 == p2 ? EOF : *(p1++);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">read</span>(<span class="title">T</span> &amp;<span class="title">n</span>) &#123;</span></span><br><span class="line">    n = <span class="number">0</span>; RI ch = gc(), f;</span><br><span class="line">    <span class="keyword">while</span> ((ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; ch != <span class="string">&#x27;-&#x27;</span>) ch = gc();</span><br><span class="line">    f = (ch == <span class="string">&#x27;-&#x27;</span> ? ch = gc(), <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) n = n * <span class="number">10</span> + (ch ^ <span class="number">48</span>), ch = gc();</span><br><span class="line">    n *= f;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">char</span> Of[<span class="number">105</span>], *O1 = Of, *O2 = Of;</span><br><span class="line">  <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">void</span> <span class="title">print</span>(<span class="title">T</span> <span class="title">n</span>, <span class="title">char</span> <span class="title">ch</span> = &#x27;\<span class="title">n</span>&#x27;) &#123;</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), n = -n;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span> (n) *(O1++) = (n % <span class="number">10</span>) ^ <span class="number">48</span>, n /= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span> (O1 != O2) <span class="built_in">putchar</span>(*(--O1));</span><br><span class="line">    <span class="built_in">putchar</span>(ch);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> IO :: read;</span><br><span class="line"><span class="keyword">using</span> IO :: print;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> MAXN = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> v, id;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;A) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v ^ A.v ? v &lt; A.v : id &lt; A.id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Node &amp;A) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> v == A.v &amp;&amp; id == A.id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; a[MAXN], b[MAXN];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ErasableHeap</span> &#123;</span></span><br><span class="line">  <span class="built_in">priority_queue</span> &lt;Node&gt; I, O;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123; <span class="keyword">while</span> (!O.empty() &amp;&amp; I.top() == O.top()) I.pop(), O.pop(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123; <span class="keyword">while</span> (!I.empty()) I.pop();    <span class="keyword">while</span> (!O.empty()) O.pop(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node x)</span> </span>&#123; I.push(x); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(Node x)</span>  </span>&#123; O.push(x); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123; flush(); <span class="keyword">return</span> I.empty(); &#125;</span><br><span class="line">  <span class="function"><span class="keyword">inline</span> Node <span class="title">top</span><span class="params">()</span>   </span>&#123; flush(); <span class="keyword">return</span> I.top();   &#125;</span><br><span class="line">&#125; q1, q2, q3, q4, q5;</span><br><span class="line"><span class="comment">// Max AB in P; Max A in P; Max B in P; Max A in P and B in Q; Max A in Q and B in P;</span></span><br><span class="line"><span class="keyword">int</span> visa[MAXN], visb[MAXN];</span><br><span class="line"><span class="keyword">int</span> stkQ[MAXN], stkO[MAXN];</span><br><span class="line"><span class="comment">// 0 : in P; 1 : in Q; 2 : in O</span></span><br><span class="line"><span class="keyword">int</span> cntO, cntQ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DeleteAll</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">0</span> &amp;&amp; visb[x] == <span class="number">0</span>) q1.erase((Node)&#123;a[x].v + b[x].v, x&#125;);</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">0</span>)                 q2.erase(a[x]);</span><br><span class="line">  <span class="keyword">if</span> (visb[x] == <span class="number">0</span>)                 q3.erase(b[x]);</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">0</span> &amp;&amp; visb[x] == <span class="number">1</span>) q4.erase(a[x]);</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">1</span> &amp;&amp; visb[x] == <span class="number">0</span>) q5.erase(b[x]);</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">1</span> &amp;&amp; visb[x] == <span class="number">1</span>) --cntQ;</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">2</span> &amp;&amp; visb[x] == <span class="number">2</span>) --cntO;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertAll</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">0</span> &amp;&amp; visb[x] == <span class="number">0</span>) q1.insert((Node)&#123;a[x].v + b[x].v, x&#125;);</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">0</span>)                 q2.insert(a[x]);</span><br><span class="line">  <span class="keyword">if</span> (visb[x] == <span class="number">0</span>)                 q3.insert(b[x]);</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">0</span> &amp;&amp; visb[x] == <span class="number">1</span>) q4.insert(a[x]);</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">1</span> &amp;&amp; visb[x] == <span class="number">0</span>) q5.insert(b[x]);</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">1</span> &amp;&amp; visb[x] == <span class="number">1</span>) stkQ[++cntQ] = x;</span><br><span class="line">  <span class="keyword">if</span> (visa[x] == <span class="number">2</span> &amp;&amp; visb[x] == <span class="number">2</span>) stkO[++cntO] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushInQ</span><span class="params">(<span class="keyword">int</span> *vis, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  DeleteAll(x);</span><br><span class="line">  vis[x] = <span class="number">1</span>;</span><br><span class="line">  InsertAll(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PushInO</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  DeleteAll(x);</span><br><span class="line">  visa[x] = visb[x] = <span class="number">2</span>;</span><br><span class="line">  InsertAll(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> T; read(T);</span><br><span class="line">  <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    <span class="keyword">int</span> n, K, L; read(n), read(K), read(L);</span><br><span class="line">    <span class="keyword">int</span> res = K - L;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">      read(a[i].v), a[i].id = i;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">      read(b[i].v), b[i].id = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">      visa[i] = visb[i] = <span class="number">0</span>;</span><br><span class="line">    cntO = <span class="number">0</span>, cntQ = <span class="number">0</span>;</span><br><span class="line">    q1.clear(); q2.clear(); q3.clear(); q4.clear(); q5.clear();</span><br><span class="line"></span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n, [](Node x, Node y)&#123; <span class="keyword">return</span> x.v &gt; y.v; &#125;);</span><br><span class="line">    sort(b + <span class="number">1</span>, b + <span class="number">1</span> + n, [](Node x, Node y)&#123; <span class="keyword">return</span> x.v &gt; y.v; &#125;);  </span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= res; ++i) &#123;</span><br><span class="line">      ans += a[i].v, visa[a[i].id] = <span class="number">1</span>;</span><br><span class="line">      ans += b[i].v, visb[b[i].id] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n, [](Node x, Node y)&#123; <span class="keyword">return</span> x.id &lt; y.id; &#125;);</span><br><span class="line">    sort(b + <span class="number">1</span>, b + <span class="number">1</span> + n, [](Node x, Node y)&#123; <span class="keyword">return</span> x.id &lt; y.id; &#125;);</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= n; ++i) InsertAll(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tmp = L;</span><br><span class="line">    <span class="keyword">while</span> (L--) &#123;</span><br><span class="line">      LL val1 = q1.top().v;</span><br><span class="line">      LL val2 = !q2.empty() &amp;&amp; !q5.empty() ? q2.top().v + q5.top().v : <span class="number">-0x7f7f7f7f7f7f7f7f</span>;</span><br><span class="line">      LL val3 = !q3.empty() &amp;&amp; !q4.empty() ? q3.top().v + q4.top().v : <span class="number">-0x7f7f7f7f7f7f7f7f</span>;</span><br><span class="line">      LL val4 = cntQ &amp;&amp; !q2.empty() &amp;&amp; !q3.empty() ? q2.top().v + q3.top().v : <span class="number">-0x7f7f7f7f7f7f7f7f</span>;</span><br><span class="line">      LL val5 = cntO &amp;&amp; !q4.empty() &amp;&amp; !q5.empty() ? q4.top().v + q5.top().v : <span class="number">-0x7f7f7f7f7f7f7f7f</span>;</span><br><span class="line">      <span class="keyword">if</span> (val1 &gt; val2 &amp;&amp; val1 &gt; val3 &amp;&amp; val1 &gt; val4 &amp;&amp; val1 &gt; val5) &#123;</span><br><span class="line">        ans += val1;</span><br><span class="line">        PushInO(q1.top().id);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (val2 &gt; val3 &amp;&amp; val2 &gt; val4 &amp;&amp; val2 &gt; val5) &#123;</span><br><span class="line">        ans += val2;</span><br><span class="line">        <span class="keyword">int</span> tmp = q5.top().id;</span><br><span class="line">        PushInQ(visa, q2.top().id);</span><br><span class="line">        PushInO(tmp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (val3 &gt; val4 &amp;&amp; val3 &gt; val5) &#123;</span><br><span class="line">        ans += val3;</span><br><span class="line">        <span class="keyword">int</span> tmp = q4.top().id;</span><br><span class="line">        PushInQ(visb, q3.top().id);</span><br><span class="line">        PushInO(tmp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (val4 &gt; val5) &#123;</span><br><span class="line">        ans += val4;</span><br><span class="line">        <span class="keyword">int</span> t1 = q2.top().id, t2 = q3.top().id;</span><br><span class="line">        PushInO(stkQ[cntQ]);</span><br><span class="line">        PushInQ(visa, t1);</span><br><span class="line">        PushInQ(visb, t2);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        ans += val5;</span><br><span class="line">        <span class="keyword">int</span> t1 = q4.top().id, t2 = q5.top().id, t3 = stkO[cntO];</span><br><span class="line">        PushInQ(visa, t3), PushInQ(visb, t3);</span><br><span class="line">        PushInO(t1);</span><br><span class="line">        PushInO(t2);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    print(ans);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">S -&gt; A -&gt; B -&gt; T</span></span><br><span class="line"><span class="comment">S -&gt; A -&gt; L -&gt; R -&gt; B -&gt; T</span></span><br><span class="line"><span class="comment">S -&gt; A1 -&gt; L -&gt; A2 -&gt; B2 -&gt; T</span></span><br><span class="line"><span class="comment">S -&gt; A1 -&gt; B1 -&gt; R -&gt; B2 -&gt; T</span></span><br><span class="line"><span class="comment">S -&gt; A1 -&gt; L -&gt; A2 -&gt; B2 -&gt; R -&gt; B3 -&gt; T</span></span><br><span class="line"><span class="comment">S -&gt; A1 -&gt; B1 -&gt; R -&gt; B2 -&gt; A2 -&gt; L -&gt; A3 -&gt; B3 -&gt; T</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">First, use all of the path 2</span></span><br><span class="line"><span class="comment">Then, expand rest times</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Let P is a set of the nodes not be chosen, Q is a set of the nodes be chosen into LR, Otherwise is O.</span></span><br><span class="line"><span class="comment">path 1 : A, B   in P                            O : A, B   insert</span></span><br><span class="line"><span class="comment">path 3 : A1, B2 in P; A2     in Q               O : A2, B2 insert                         Q : A2 delete,     A1     insert</span></span><br><span class="line"><span class="comment">path 4 : A1, B2 in P; B1     in Q               O : A1, B1 insert                         Q : B1 delete,     B2     insert</span></span><br><span class="line"><span class="comment">path 5 : A1, B3 in P; A2, B2 in Q               O : A2, B2 insert                         Q : A2, B2 delete, A1, B3 insert</span></span><br><span class="line"><span class="comment">path 6 : A1, B3 in P; B1, A3 in Q; A2, B2 in O  O : A2, B2 delete, A1, B1, A3, B3 insert  Q : B1, A3 delete, A2, B2 insert</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">cerr</span> &lt;&lt; (<span class="keyword">double</span>)(clock()) / CLOCKS_PER_SEC &lt;&lt; <span class="string">&quot; ms &quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// created by Daniel yuan</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     ________</span></span><br><span class="line"><span class="comment">    /        \</span></span><br><span class="line"><span class="comment">   / /      \ \</span></span><br><span class="line"><span class="comment">  / /        \ \</span></span><br><span class="line"><span class="comment">  \            /</span></span><br><span class="line"><span class="comment">   \  ______  /</span></span><br><span class="line"><span class="comment">    \________/</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>最后再来个总结：</p><p>模拟费用流究其根本是先建图，然后再分析图进行贪心模拟。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;简单学习了模拟费用流之后一直有点迷糊，后来在交流中似乎悟到了些什么。&lt;/p&gt;
&lt;p&gt;能推出这道题挺开心的，而且对模拟费用流有了更进一步的理解。&lt;/p&gt;</summary>
    
    
    
    
    <category term="网络流" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="费用流" scheme="http://example.com/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
    <category term="模拟费用流" scheme="http://example.com/tags/%E6%A8%A1%E6%8B%9F%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>DP of DP</title>
    <link href="http://example.com/2021/01/21/DP-of-DP/"/>
    <id>http://example.com/2021/01/21/DP-of-DP/</id>
    <published>2021-01-21T11:53:34.000Z</published>
    <updated>2021-01-21T12:37:37.879Z</updated>
    
    <content type="html"><![CDATA[<p>做过不少 DP of DP 题，但是考试还是想不到，很气，写个总结记录下。</p><a id="more"></a><p>对于一个题目，如果它要求的是在某个限制下计数，并且在看一个状态有没有满足限制的时候也需要 DP，这时候往往就要用到 DP of DP。</p><p>一般的流程是这样的，我们先考虑对于一个已知状态，怎么判定其是否满足性质。这时候我们一般都会有一个 DP，且这个 DP 是用增量法填表的，即类似于 <span class="math inline">\(f_{i,...}\)</span> 表示前 <span class="math inline">\(i\)</span> 个位置（或其它）怎么怎么样。然后因为我们的根本需求是计数，而计数我们也用到增量法，所以可以把 <span class="math inline">\(f_{i,...}\)</span> 的 <span class="math inline">\(i\)</span> 放到外层 DP 处，然后把剩下的 <span class="math inline">\(f_{...}\)</span> 给排成一列压缩起来，变成一个状态。这样在外层我们就得到了 <span class="math inline">\(F_{i,S}\)</span>，表示考虑前 <span class="math inline">\(i\)</span> 个位置（或其它），内层 DP 的状态是 <span class="math inline">\(S\)</span> 的方案数。在转移 <span class="math inline">\(i+1\)</span> 的时候，我们把 <span class="math inline">\(S\)</span> 还原成内层 DP 数组 <span class="math inline">\(f_{...}\)</span>，然后对 <span class="math inline">\(f_{...}\)</span> 和 <span class="math inline">\(i+1\)</span> 跑内层 DP 得到一个新状态<span class="math inline">\(f^{&#39;}_{...}\)</span> 并重新压缩成 <span class="math inline">\(T\)</span>，这样就可以从 <span class="math inline">\(F_{i,S}\)</span> 转移到 <span class="math inline">\(F_{i+1,T}\)</span>。</p><p>考虑看一道例题：</p><blockquote><p>给一个小写字母字符串 <span class="math inline">\(S\)</span>，<span class="math inline">\(|S|\leq15\)</span>，问有多少个长度为 <span class="math inline">\(n\)</span>，<span class="math inline">\((n\leq 100)\)</span> 的小写字母字符串 <span class="math inline">\(T\)</span>，使得 <span class="math inline">\(S\)</span> 和 <span class="math inline">\(T\)</span> 的最长上升子序列的长度为 <span class="math inline">\(k\)</span>。对于 <span class="math inline">\(k=0,1,2...|S|\)</span> 都要求答案。</p></blockquote><p>经典题，按照上面的流程来做。</p><p>首先对于一个已知字符串 <span class="math inline">\(T\)</span>，考虑求它的最长上升子序列。设 <span class="math inline">\(f_{i,j}\)</span> 表示考虑 <span class="math inline">\(T\)</span> 的前 <span class="math inline">\(i\)</span> 个字符，<span class="math inline">\(S\)</span> 的前 <span class="math inline">\(j\)</span> 个字符的最长上升子序列最长是多少。这个 DP 符合增量法，所以把 <span class="math inline">\(f_{1,2...j}\)</span> 压缩成一个状态 <span class="math inline">\(S\)</span>。在外层，设 <span class="math inline">\(F_{i,S}\)</span> 表示考虑 <span class="math inline">\(T\)</span> 的前 <span class="math inline">\(i\)</span> 个字符，<span class="math inline">\(f_{i,\{0,1...|S|\}}\)</span> 算出来的值状压起来为 <span class="math inline">\(S\)</span> 的方案数。转移的时候，枚举下一个字符填什么，然后把 <span class="math inline">\(S\)</span> 还原成 <span class="math inline">\(f\)</span>，然后计算出新的 <span class="math inline">\(f&#39;\)</span>，再状压回 <span class="math inline">\(T\)</span>，就可以从 <span class="math inline">\(F_{i,S}\)</span> 转移到 <span class="math inline">\(F_{i+1,T}\)</span> 了。</p><p>这样我们就完成了普通的 DP of DP，但是这样复杂度有问题，因为 <span class="math inline">\(f\)</span> 的取值范围是 <span class="math inline">\([0,15]\)</span> 压起来特别大，但是我们发现 <span class="math inline">\(f_i-f_{i-1}\in[0,1]\)</span>，所以可以把 <span class="math inline">\(f_i-f_{i-1}\)</span> 压起来，这样 <span class="math inline">\(F_{i,S}\)</span> 的 <span class="math inline">\(S\)</span> 的取值只有 <span class="math inline">\(2^{15}\)</span> 了。</p><p>代码如下，这里只实现了字符集为 <span class="math inline">\(\{N,O,I\}\)</span> 。原题是 <a href="https://www.luogu.com.cn/problem/P4590">[TJOI2018] 游园会</a>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILEIO(name) freopen(name<span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(name<span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">20</span>], g[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> Trans[<span class="number">1</span> &lt;&lt; <span class="number">15</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][<span class="number">3</span>][<span class="number">1</span> &lt;&lt; <span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> bitcnt[<span class="number">1</span> &lt;&lt; <span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> Ans[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123; x += y - mod, x += (x &gt;&gt; <span class="number">31</span>) &amp; mod; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  FILEIO(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n, k; <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span> (RI S = <span class="number">0</span>, NS; S &lt; (<span class="number">1</span> &lt;&lt; k); ++S) &#123;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">      f[i] = f[i - <span class="number">1</span>] + ((S &gt;&gt; (i - <span class="number">1</span>)) &amp; <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">      g[i] = max(g[i - <span class="number">1</span>], max(f[i], f[i - <span class="number">1</span>] + (s[i] == <span class="string">&#x27;N&#x27;</span>)));</span><br><span class="line">    NS = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">      NS |= (g[i] - g[i - <span class="number">1</span>]) &lt;&lt; (i - <span class="number">1</span>);</span><br><span class="line">    Trans[S][<span class="number">0</span>] = NS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">      g[i] = max(g[i - <span class="number">1</span>], max(f[i], f[i - <span class="number">1</span>] + (s[i] == <span class="string">&#x27;O&#x27;</span>)));</span><br><span class="line">    NS = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">      NS |= (g[i] - g[i - <span class="number">1</span>]) &lt;&lt; (i - <span class="number">1</span>);</span><br><span class="line">    Trans[S][<span class="number">1</span>] = NS;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">      g[i] = max(g[i - <span class="number">1</span>], max(f[i], f[i - <span class="number">1</span>] + (s[i] == <span class="string">&#x27;I&#x27;</span>)));</span><br><span class="line">    NS = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">      NS |= (g[i] - g[i - <span class="number">1</span>]) &lt;&lt; (i - <span class="number">1</span>);</span><br><span class="line">    Trans[S][<span class="number">2</span>] = NS;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> cur = <span class="number">1</span>, nxt = <span class="number">0</span>;</span><br><span class="line">  dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    swap(cur, nxt);</span><br><span class="line">    <span class="built_in">memset</span>(dp[nxt], <span class="number">0</span>, <span class="keyword">sizeof</span>(dp[nxt]));</span><br><span class="line">    <span class="keyword">for</span> (RI S = <span class="number">0</span>; S &lt; (<span class="number">1</span> &lt;&lt; k); ++S) &#123;</span><br><span class="line">      Add(dp[nxt][<span class="number">1</span>][Trans[S][<span class="number">0</span>]], dp[cur][<span class="number">0</span>][S]);</span><br><span class="line">      Add(dp[nxt][<span class="number">1</span>][Trans[S][<span class="number">0</span>]], dp[cur][<span class="number">1</span>][S]);</span><br><span class="line">      Add(dp[nxt][<span class="number">1</span>][Trans[S][<span class="number">0</span>]], dp[cur][<span class="number">2</span>][S]);</span><br><span class="line">      Add(dp[nxt][<span class="number">0</span>][Trans[S][<span class="number">1</span>]], dp[cur][<span class="number">0</span>][S]);</span><br><span class="line">      Add(dp[nxt][<span class="number">2</span>][Trans[S][<span class="number">1</span>]], dp[cur][<span class="number">1</span>][S]);</span><br><span class="line">      Add(dp[nxt][<span class="number">0</span>][Trans[S][<span class="number">1</span>]], dp[cur][<span class="number">2</span>][S]);</span><br><span class="line">      Add(dp[nxt][<span class="number">0</span>][Trans[S][<span class="number">2</span>]], dp[cur][<span class="number">0</span>][S]);</span><br><span class="line">      Add(dp[nxt][<span class="number">0</span>][Trans[S][<span class="number">2</span>]], dp[cur][<span class="number">1</span>][S]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (RI S = <span class="number">1</span>; S &lt; (<span class="number">1</span> &lt;&lt; k); ++S)</span><br><span class="line">    bitcnt[S] = bitcnt[S ^ (S &amp; (-S))] + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    <span class="keyword">for</span> (RI S = <span class="number">0</span>; S &lt; (<span class="number">1</span> &lt;&lt; k); ++S)</span><br><span class="line">      Add(Ans[bitcnt[S]], dp[nxt][i][S]);</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt;= k; ++i)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans[i]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// created by Daniel yuan</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     ________</span></span><br><span class="line"><span class="comment">    /        \</span></span><br><span class="line"><span class="comment">   / /      \ \</span></span><br><span class="line"><span class="comment">  / /        \ \</span></span><br><span class="line"><span class="comment">  \            /</span></span><br><span class="line"><span class="comment">   \  ______  /</span></span><br><span class="line"><span class="comment">    \________/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是我们肯定不仅仅满足这个普通的 DP of DP，我们需要更便捷的东西——自动机。</p><p>也就是说我们干脆就直接把 <span class="math inline">\(S\)</span> 看成是一个状态的集合，然后把所有的状态的集合建出一个转移的自动机。一个自动机上面的节点代表着一个状态，而转移边就代表着这个状态加入一个东西后可以转移到哪里。这样我们的 DP 就变成了一个普通的自动机上 DP。</p><p>典型例子是 <a href="https://www.luogu.com.cn/problem/P5279">[ZJOI2019] 麻将</a>，可以结合<a href="https://daniel-yuan.github.io/2021/01/19/%E9%BA%BB%E5%B0%86%E7%9B%B8%E5%85%B3/#more">我的这篇博客</a>把这个题切了。</p><p><del>（不知为何写着写着就变成一个普及 DP of DP 的博客了……）</del></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;做过不少 DP of DP 题，但是考试还是想不到，很气，写个总结记录下。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP" scheme="http://example.com/tags/DP/"/>
    
    <category term="DP of DP" scheme="http://example.com/tags/DP-of-DP/"/>
    
  </entry>
  
  <entry>
    <title>[ZJOI2019] 麻将 题解</title>
    <link href="http://example.com/2021/01/21/ZJOI2019-%E9%BA%BB%E5%B0%86-%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/01/21/ZJOI2019-%E9%BA%BB%E5%B0%86-%E9%A2%98%E8%A7%A3/</id>
    <published>2021-01-21T00:33:52.000Z</published>
    <updated>2021-01-21T01:13:52.612Z</updated>
    
    <content type="html"><![CDATA[<p>首先对于已有的一堆牌，我们应该要能确定它能不能胡。</p><p>这部分具体的可以参考<a href="https://daniel-yuan.github.io/2021/01/19/%E9%BA%BB%E5%B0%86%E7%9B%B8%E5%85%B3/#more">我的另一篇博客</a>，顺带说一句，[ZJOI2019] 麻将的前置知识居然被拿去 [GXOI/GZOI2019] 出了个宝牌一大堆<del>，ZJOI 恐怖如斯</del>。</p><a id="more"></a><p>回到这个题目，对于一个已知状态，我们可以设 <span class="math inline">\(f_{i,0/1/2,0/1/2,0/1}\)</span> 表示前 <span class="math inline">\(i\)</span> 张牌，<span class="math inline">\(i-1\)</span> 开始的顺子有 <span class="math inline">\(0/1/2\)</span> 个，<span class="math inline">\(i\)</span> 开始的顺子有 <span class="math inline">\(0/1/2\)</span> 个，有无雀头的最大面子数。</p><p>但是现在状态是未知的，所以考虑 DP of DP，即把这个 <span class="math inline">\(f\)</span> 压到状态里面去。为了方便，我们把 <span class="math inline">\(f_{0/1/2,0/1/2,0/1}\)</span> （注意到这里已经忽略了 <span class="math inline">\(i\)</span>，因为 <span class="math inline">\(i\)</span> 对转移没有影响）建一个自动机。而自动机上面的信息就是形如 <span class="math inline">\(f_{0,0,0}=x,f_{0,0,1}=y...\)</span> 这样的多元组，因为还有七对子的特殊牌型，所以在自动机上面额外记录一个 <span class="math inline">\(cnt\)</span> 表示对子数。</p><p>乍一看，一共有 <span class="math inline">\(3\times 3\times 2=18\)</span> 个 <span class="math inline">\(f\)</span> 状态，而 <span class="math inline">\(f\)</span> 的取值有 <span class="math inline">\(0/1/2/3/4\)</span> 五种（大于 <span class="math inline">\(4\)</span> 已经没有意义，故可以限制最大值为 <span class="math inline">\(4\)</span>），并且还有一个额外的 <span class="math inline">\(cnt\)</span> 需要记录，自动机上的节点数会达到 <span class="math inline">\(5^{18}\times 8=3.0517578125×10^{13}\)</span>，我们难以承受。但是显然有很多状态不会被涉及到，比如说 <span class="math inline">\(f_{0,0,0}=3\)</span> 的时候任何 <span class="math inline">\(f\)</span> 值都不会小于 <span class="math inline">\(3\)</span>。所以我们可以写一个 BFS 去看看自动机节点数有多少。特别的，如果 <span class="math inline">\(cnt=7\)</span> 或者 <span class="math inline">\(f_{0,0,0}=4\)</span>，那么已经胡牌，我们可以建立一个胡牌节点，与此同时，我们也可以把转移边记录下来，特别的，胡牌节点只有自环。代码形如这样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">map &lt;Status, int&gt; mp;</span><br><span class="line">void GetStatus() &#123;</span><br><span class="line">  Status t, nxt; &#x2F;&#x2F; 这是一个定义状态的结构体</span><br><span class="line">  int cnt &#x3D; 0;</span><br><span class="line">  q.push(t), mp[t] &#x3D; ++cnt;</span><br><span class="line">  while (t.cnt !&#x3D; -1) t.Trans(2); &#x2F;&#x2F; 这里是构造一个胡牌节点</span><br><span class="line">  mp[t] &#x3D; ++cnt;</span><br><span class="line">  for (RI i &#x3D; 0; i &lt;&#x3D; 4; ++i)</span><br><span class="line">    child[mp[t]][i] &#x3D; mp[t];</span><br><span class="line">  while (!q.empty()) &#123;</span><br><span class="line">    t &#x3D; q.front(); q.pop();</span><br><span class="line">    for (RI i &#x3D; 0; i &lt;&#x3D; 4; ++i) &#123;</span><br><span class="line">      nxt &#x3D; t, nxt.Trans(i); &#x2F;&#x2F; 更新 f</span><br><span class="line">      if (mp.find(nxt) &#x3D;&#x3D; mp.end())</span><br><span class="line">        q.push(nxt), mp[nxt] &#x3D; ++cnt; &#x2F;&#x2F; 新建节点</span><br><span class="line">      child[mp[t]][i] &#x3D; mp[nxt]; &#x2F;&#x2F; 记录转移边</span><br><span class="line">    &#125;</span><br><span class="line">    if (cnt &gt; 100000) break; &#x2F;&#x2F; protection</span><br><span class="line">  &#125;</span><br><span class="line">  length &#x3D; mp.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于 <span class="math inline">\(f\)</span> 具体怎么转移大家可以自己推一推。</p><p>然后你会发现搜出来只有 1566 个节点（我也不知道为什么和很多博客上写的都不同，我还怀疑了自己好久……），于是我们就可以根据这个来 DP 了（可以把节点看做是内部的 DP）。</p><p>设 <span class="math inline">\(g_{i,j,k}\)</span> 表示考虑前 <span class="math inline">\(i\)</span> 种牌，当前牌长度为 <span class="math inline">\(j\)</span>，在自动机上面的点 <span class="math inline">\(k\)</span> 的方案数。转移的时候枚举这一种牌有多少张即可，复杂度 <span class="math inline">\(O(n^2\times 1566)\)</span>。因为相同种类的牌是有编号区分的，所以转移的时候一定要乘组合数（被卡了好久）。</p><p>最后再考虑计算答案。对于一个至少 <span class="math inline">\(k\)</span> 次才能胡牌的状态，它对答案的贡献为 <span class="math inline">\(k\)</span>。因为是至少，不好直接求，考虑转化成至多。即改成对于一个至多 <span class="math inline">\(k-1\)</span> 次都不能胡牌的状态，它对答案的贡献为 <span class="math inline">\(k\)</span>。而这个状态在 <span class="math inline">\(1\sim k-1\)</span> 次都不能胡牌。所以我们可以把贡献拆分到 <span class="math inline">\(1\sim k-1\)</span> 上面去，每个部分的权值为 <span class="math inline">\(1\)</span>。（或者说 <span class="math inline">\(k=\sum_{i=1}^k1\)</span>？）。</p><p>那么最终答案就是 <span class="math inline">\(\frac{\sum_{i=14}^{4n}\sum_{j=1}^{len}g_{n,i,j}(4n-i)!(i-13)![\text{ $j$ 不是胡牌节点 }]}{(4n-13)!}+1\)</span>。代码如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">#define debug(...) fprintf(stderr, __VA_ARGS__)</span><br><span class="line">#define RI register int</span><br><span class="line">typedef long long LL;</span><br><span class="line"></span><br><span class="line">#define FILEIO(name) freopen(name&quot;.in&quot;, &quot;r&quot;, stdin), freopen(name&quot;.out&quot;, &quot;w&quot;, stdout);</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">struct Status &#123; &#x2F;&#x2F; 自动机中的状态</span><br><span class="line">  int f[3][3][2], cnt;</span><br><span class="line">  Status () &#123;</span><br><span class="line">    for (RI i &#x3D; 0; i &lt;&#x3D; 2; ++i)</span><br><span class="line">      for (RI j &#x3D; 0; j &lt;&#x3D; 2; ++j)</span><br><span class="line">        for (RI k &#x3D; 0; k &lt;&#x3D; 1; ++k)</span><br><span class="line">          f[i][j][k] &#x3D; -0x3f3f3f3f;</span><br><span class="line">    cnt &#x3D; f[0][0][0] &#x3D; 0;</span><br><span class="line">  &#125;</span><br><span class="line">  void Trans(int res) &#123; &#x2F;&#x2F; 自动机状态的内部转移</span><br><span class="line">    Status nxt;</span><br><span class="line">    int win &#x3D; 0;</span><br><span class="line">    nxt.cnt &#x3D; cnt + (res &gt;&#x3D; 2);</span><br><span class="line">    win |&#x3D; (nxt.cnt &gt;&#x3D; 7);</span><br><span class="line">    for (RI i &#x3D; 0; i &lt;&#x3D; 2; ++i)</span><br><span class="line">      for (RI j &#x3D; 0; j &lt;&#x3D; 2; ++j)</span><br><span class="line">        for (RI k &#x3D; 0; k &lt;&#x3D; 1; ++k) &#123;</span><br><span class="line">          for (RI lasi &#x3D; 0; lasi &lt;&#x3D; 2; ++lasi)</span><br><span class="line">            for (RI lask &#x3D; 0; lask &lt;&#x3D; k; ++lask) &#123;</span><br><span class="line">              int ned &#x3D; lasi + i + j + 2 * (k - lask);</span><br><span class="line">              if (ned &gt; res) continue;</span><br><span class="line">              nxt.f[i][j][k] &#x3D; min(4, max(nxt.f[i][j][k], f[lasi][i][lask] + j + (res - ned &gt;&#x3D; 3)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    for (RI i &#x3D; 0; i &lt;&#x3D; 2; ++i)</span><br><span class="line">      for (RI j &#x3D; 0; j &lt;&#x3D; 2; ++j)</span><br><span class="line">        for (RI k &#x3D; 0; k &lt;&#x3D; 1; ++k)</span><br><span class="line">          if (nxt.f[i][j][k] &lt; 0)</span><br><span class="line">            nxt.f[i][j][k] &#x3D; -0x3f3f3f3f;</span><br><span class="line">    win |&#x3D; (nxt.f[0][0][1] &gt;&#x3D; 4);</span><br><span class="line">    if (win) &#x2F;&#x2F; 判胡牌</span><br><span class="line">      for (RI i &#x3D; 0; i &lt;&#x3D; 2; ++i)</span><br><span class="line">        for (RI j &#x3D; 0; j &lt;&#x3D; 2; ++j)</span><br><span class="line">          for (RI k &#x3D; 0; k &lt;&#x3D; 1; ++k)</span><br><span class="line">            nxt.f[i][j][k] &#x3D; nxt.cnt &#x3D; -1;</span><br><span class="line">    *this &#x3D; nxt;</span><br><span class="line">  &#125;</span><br><span class="line">  bool operator &lt; (const Status &amp;A) const &#123;</span><br><span class="line">    if (cnt !&#x3D; A.cnt) return cnt &lt; A.cnt;</span><br><span class="line">    for (RI i &#x3D; 0; i &lt;&#x3D; 2; ++i)</span><br><span class="line">      for (RI j &#x3D; 0; j &lt;&#x3D; 2; ++j)</span><br><span class="line">        for (RI k &#x3D; 0; k &lt;&#x3D; 1; ++k)</span><br><span class="line">          if (f[i][j][k] !&#x3D; A.f[i][j][k])</span><br><span class="line">            return f[i][j][k] &lt; A.f[i][j][k];</span><br><span class="line">    return 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">map &lt;Status, int&gt; mp;</span><br><span class="line">queue &lt;Status&gt; q;</span><br><span class="line">int const MAXN &#x3D; 2005, mod &#x3D; 998244353;</span><br><span class="line">int child[MAXN][5];</span><br><span class="line">int f[2][405][MAXN];</span><br><span class="line">int tong[105];</span><br><span class="line">int length;</span><br><span class="line">LL frac[MAXN], invfrac[MAXN];</span><br><span class="line"></span><br><span class="line">LL qpow(LL a, LL k) &#123;</span><br><span class="line">  LL re &#x3D; 1;</span><br><span class="line">  for (; k; k &gt;&gt;&#x3D; 1, a &#x3D; a * a % mod)</span><br><span class="line">    if (k &amp; 1) re &#x3D; re * a % mod;</span><br><span class="line">  return re;</span><br><span class="line">&#125;</span><br><span class="line">void Init(int Max) &#123;</span><br><span class="line">  frac[0] &#x3D; 1;</span><br><span class="line">  for (RI i &#x3D; 1; i &lt;&#x3D; Max; ++i)</span><br><span class="line">    frac[i] &#x3D; frac[i - 1] * i % mod;</span><br><span class="line">  invfrac[Max] &#x3D; qpow(frac[Max], mod - 2);</span><br><span class="line">  for (RI i &#x3D; Max; i &gt;&#x3D; 1; --i)</span><br><span class="line">    invfrac[i - 1] &#x3D; invfrac[i] * i % mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void GetStatus() &#123; &#x2F;&#x2F; 上文已经解释了</span><br><span class="line">  Status t, nxt;</span><br><span class="line">  int cnt &#x3D; 0;</span><br><span class="line">  q.push(t), mp[t] &#x3D; ++cnt;</span><br><span class="line">  while (t.cnt !&#x3D; -1) t.Trans(2);</span><br><span class="line">  mp[t] &#x3D; ++cnt;</span><br><span class="line">  for (RI i &#x3D; 0; i &lt;&#x3D; 4; ++i)</span><br><span class="line">    child[mp[t]][i] &#x3D; mp[t];</span><br><span class="line">  while (!q.empty()) &#123;</span><br><span class="line">    t &#x3D; q.front(); q.pop();</span><br><span class="line">    for (RI i &#x3D; 0; i &lt;&#x3D; 4; ++i) &#123;</span><br><span class="line">      nxt &#x3D; t, nxt.Trans(i);</span><br><span class="line">      if (mp.find(nxt) &#x3D;&#x3D; mp.end())</span><br><span class="line">        q.push(nxt), mp[nxt] &#x3D; ++cnt;</span><br><span class="line">      child[mp[t]][i] &#x3D; mp[nxt];</span><br><span class="line">    &#125;</span><br><span class="line">    if (cnt &gt; 100000) break; &#x2F;&#x2F; protection</span><br><span class="line">  &#125;</span><br><span class="line">  length &#x3D; mp.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void Add(int &amp;x, int y) &#123; x +&#x3D; y - mod; x +&#x3D; (x &gt;&gt; 31) &amp; mod; &#125;</span><br><span class="line"></span><br><span class="line">LL C[10][10];</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">  </span><br><span class="line">#ifdef LOCAL</span><br><span class="line">  FILEIO(&quot;a&quot;);</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">  GetStatus();</span><br><span class="line">  int n; cin &gt;&gt; n;</span><br><span class="line">  C[0][0] &#x3D; 1;</span><br><span class="line">  C[1][0] &#x3D; C[1][1] &#x3D; 1;</span><br><span class="line">  C[2][0] &#x3D; C[2][2] &#x3D; 1, C[2][1] &#x3D; 2;</span><br><span class="line">  C[3][0] &#x3D; C[3][3] &#x3D; 1, C[3][1] &#x3D; C[3][2] &#x3D; 3;</span><br><span class="line">  C[4][0] &#x3D; C[4][4] &#x3D; 1, C[4][1] &#x3D; C[4][3] &#x3D; 4, C[4][2] &#x3D; 6;</span><br><span class="line">  Init(4 * n);</span><br><span class="line">  for (RI i &#x3D; 1, x, y; i &lt;&#x3D; 13; ++i)</span><br><span class="line">    cin &gt;&gt; x &gt;&gt; y, ++tong[x];</span><br><span class="line">  int cur &#x3D; 0, nxt &#x3D; 1;</span><br><span class="line">  f[nxt][0][1] &#x3D; 1;</span><br><span class="line">  for (RI i &#x3D; 1; i &lt;&#x3D; n; ++i) &#123; &#x2F;&#x2F; 简单 DP</span><br><span class="line">    swap(cur, nxt);</span><br><span class="line">    memset(f[nxt], 0, sizeof(f[nxt]));</span><br><span class="line">    for (RI j &#x3D; 0; j &lt;&#x3D; 4 * (i - 1); ++j)</span><br><span class="line">      for (RI now &#x3D; 1; now &lt;&#x3D; length; ++now)</span><br><span class="line">        for (RI k &#x3D; tong[i]; k &lt;&#x3D; 4; ++k)</span><br><span class="line">          Add(f[nxt][j + k][child[now][k]], 1ll * f[cur][j][now] * C[4 - tong[i]][k - tong[i]] % mod);</span><br><span class="line">  &#125;</span><br><span class="line">  int ans &#x3D; 0;</span><br><span class="line">  for (RI i &#x3D; 14; i &lt;&#x3D; 4 * n; ++i)</span><br><span class="line">    for (RI j &#x3D; 1; j &lt;&#x3D; length; ++j)</span><br><span class="line">      if (j !&#x3D; 2)</span><br><span class="line">        Add(ans, 1ll * f[nxt][i][j] * frac[4 * n - i] % mod * frac[i - 13] % mod);</span><br><span class="line">  ans &#x3D; (1ll * ans * invfrac[4 * n - 13] % mod + 1) % mod;</span><br><span class="line">  cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; created by Daniel yuan</span><br><span class="line">&#x2F;*</span><br><span class="line">     ________</span><br><span class="line">    &#x2F;        \</span><br><span class="line">   &#x2F; &#x2F;      \ \</span><br><span class="line">  &#x2F; &#x2F;        \ \</span><br><span class="line">  \            &#x2F;</span><br><span class="line">   \  ______  &#x2F;</span><br><span class="line">    \________&#x2F;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;首先对于已有的一堆牌，我们应该要能确定它能不能胡。&lt;/p&gt;
&lt;p&gt;这部分具体的可以参考&lt;a href=&quot;https://daniel-yuan.github.io/2021/01/19/%E9%BA%BB%E5%B0%86%E7%9B%B8%E5%85%B3/#more&quot;&gt;我的另一篇博客&lt;/a&gt;，顺带说一句，[ZJOI2019] 麻将的前置知识居然被拿去 [GXOI/GZOI2019] 出了个宝牌一大堆&lt;del&gt;，ZJOI 恐怖如斯&lt;/del&gt;。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP" scheme="http://example.com/tags/DP/"/>
    
    <category term="自动机" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    
    <category term="DP of DP" scheme="http://example.com/tags/DP-of-DP/"/>
    
  </entry>
  
  <entry>
    <title>麻将相关</title>
    <link href="http://example.com/2021/01/19/%E9%BA%BB%E5%B0%86%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2021/01/19/%E9%BA%BB%E5%B0%86%E7%9B%B8%E5%85%B3/</id>
    <published>2021-01-19T13:39:20.000Z</published>
    <updated>2021-01-21T00:31:44.002Z</updated>
    
    <content type="html"><![CDATA[<p><del>不会打麻将的 OIer 不是好 ACMer。</del></p><p>虽然看完这篇博客你可能并不会变成雀神，但是你可能看到和麻将有关的题目就不会那么慌了。</p><a id="more"></a><p>麻将的一般规则本文就不再赘述，啥搜索引擎上都有。<del>实在不行下个雀魂玩玩也是可以的。</del></p><p>麻将题一般有两种做法：搜索和 DP。</p><h4 id="搜索">搜索：</h4><p>大多数时候是给出一副牌，看至少需要再摸几张牌才能胡。</p><p>考虑枚举合法终态，然后用牌数的差更新答案。</p><p>因为刻子和雀头都是多张同一个牌，所以这一块可以贪心，即从四张相同到一张相同的牌依次去匹配刻子和雀头，为了方便，可以设 <span class="math inline">\(dp_{i,j,k,l}\)</span> 表示有 <span class="math inline">\(i\)</span> 个四张，<span class="math inline">\(j\)</span> 个三张，<span class="math inline">\(k\)</span> 个二张拼成 <span class="math inline">\(l\)</span> 个面子加上一个雀头最少需要多少张牌，在搜索顺子的同时维护一下 <span class="math inline">\(i,j,k,l\)</span> 的值，然后直接更新答案即可。</p><p>然后考虑怎么搜索顺子，我们事先把所有的顺子预处理出来，共 <span class="math inline">\(27\)</span> 个，然后按层搜索枚举每个顺子有没有。这样复杂度是 <span class="math inline">\(O(27^4)\)</span>，显然不好。实际上，我们枚举的顺子在此刻至少要有两张牌存在于手牌中，因为如果只有一张，那么对额外牌数的贡献为 <span class="math inline">\(2\)</span>，而这张牌形成的刻子贡献的额外牌数也是 <span class="math inline">\(2\)</span>，这样可以把它算到刻子里面。</p><p>实际上这样优化下来判定是十分快的，博主认为其复杂度不会超过 <span class="math inline">\(10^4\)</span>。</p><h4 id="dp">DP：</h4><p>搜索写起来比较方便，但是搜索毕竟复杂度是指数级别的，它的速度还是慢了点，所以再介绍一种 DP 的做法。</p><p>依旧是考虑给出一副牌，看至少需要再摸几张牌才能胡。</p><p>设 <span class="math inline">\(f_{i,0/1/2,0/1/2,0/1/2/3/4,0/1}\)</span> 表示考虑前 <span class="math inline">\(i\)</span> 种牌，以 <span class="math inline">\(i-1\)</span> 开始的顺子有 <span class="math inline">\(0/1/2\)</span> 个，以 <span class="math inline">\(i\)</span> 开始的顺子有 <span class="math inline">\(0/1/2\)</span> 个，面子一共有 <span class="math inline">\(0/1/2/3/4\)</span> 个，有 <span class="math inline">\(0/1\)</span> 个雀头的最小花费。转移的时候枚举下一种牌有几张即可。后面一堆东西看似有 <span class="math inline">\(90\)</span> 个，但是实际上仅有 <span class="math inline">\(50+\)</span> 个，且转移的时候转移边数不会很多。如果在这个上面再用上【搜索中的优化】，效率会更加高。（似乎这里不太严谨，但是跑得很快就对了）</p><p>从这也可以衍生出判定一个牌的集合中存不存在一个胡牌子集的方法，即设 <span class="math inline">\(f_{i,0/1/2,0/1/2,0/1}\)</span> 表示考虑前 <span class="math inline">\(i\)</span> 种牌，以 <span class="math inline">\(i-1\)</span> 开始的顺子有 <span class="math inline">\(0/1/2\)</span> 个，以 <span class="math inline">\(i\)</span> 开始的顺子有 <span class="math inline">\(0/1/2\)</span> 个，有 <span class="math inline">\(0/1\)</span> 个雀头的最大面子数。如果有一个有雀头的状态的面子数到了 <span class="math inline">\(4\)</span>，那么就可行。</p><hr /><p>想必看完之后你就已经会打麻将了，<a href="https://www.luogu.com.cn/problem/P5279">[ZJOI2019] 麻将</a>和<a href="https://www.luogu.com.cn/problem/P5301">[GXOI/GZOI2019]宝牌一大堆</a>自然不在话下（其实后者真心就是只考了上述内容）。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;del&gt;不会打麻将的 OIer 不是好 ACMer。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;虽然看完这篇博客你可能并不会变成雀神，但是你可能看到和麻将有关的题目就不会那么慌了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="DP" scheme="http://example.com/tags/DP/"/>
    
    <category term="搜索" scheme="http://example.com/tags/%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>[ZJOI2019]开关 题解</title>
    <link href="http://example.com/2021/01/19/ZJOI2019-%E5%BC%80%E5%85%B3-%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2021/01/19/ZJOI2019-%E5%BC%80%E5%85%B3-%E9%A2%98%E8%A7%A3/</id>
    <published>2021-01-19T03:43:46.000Z</published>
    <updated>2021-01-19T08:50:34.645Z</updated>
    
    <content type="html"><![CDATA[<p>把初始状态和目标状态交换，题目不变。</p><p>为了方便，设 <span class="math inline">\(p_i\)</span> 为 <span class="math inline">\(i\)</span> 被选的概率，对应到输入即 <span class="math inline">\(\frac{p_i}{\sum_{j=1}^n p_j}\)</span> 。</p><p>设 <span class="math inline">\(f(S)\)</span> 表示从 <span class="math inline">\(S\)</span> 状态开始，期望走 <span class="math inline">\(f(S)\)</span> 步到达全零状态。为了方便，我们定义 <span class="math inline">\(\varnothing\)</span> 表示全零状态。</p><p>那么显然有<a id="more"></a> <span class="math inline">\(f(S)=\begin{cases}0&amp;S=\varnothing\\1+\sum p_if_{S \text{ xor } i}&amp;S\not=\varnothing\end{cases}\)</span>。</p><p>如果把 <span class="math inline">\(f(S)\)</span> 看做是集合幂级数 <span class="math inline">\(F=\sum_S f(S)x^S\)</span>，下半部分的 <span class="math inline">\(\sum\)</span> 可以看做是一个异或卷积（更多有关位运算的卷积，可以参考<a href="https://daniel-yuan.github.io/2021/01/19/FWT-%E5%B0%8F%E7%BB%93/#more">我的另一篇博客</a>），那么我们设另一个集合幂级数 <span class="math inline">\(G=\sum_S g(S)x^S\)</span>，其中 <span class="math inline">\(g(S)\)</span> 在 <span class="math inline">\(S\)</span> 中仅含一个元素 <span class="math inline">\(k\)</span> 的时候为 <span class="math inline">\(p_k\)</span>，否则为 <span class="math inline">\(0\)</span>。那么下半部分的 <span class="math inline">\(\sum\)</span> 就可以看做是 <span class="math inline">\(F*G\)</span>。</p><p>不看 <span class="math inline">\(\varnothing\)</span>，我们有 <span class="math inline">\(F*G+1=F\)</span>，即 <span class="math inline">\(F*(G-1)=-1\)</span>，为了方便，把 <span class="math inline">\(g(S)\)</span> 做一个微调，即 <span class="math inline">\(g(S)=\begin{cases}-1&amp;S=\varnothing\\p_i&amp;|S|=1,S\text{ 中的元素为 }i\\0&amp;|S|&gt;1\end{cases}\)</span>。这样在不考虑 <span class="math inline">\(\varnothing\)</span> 的时候，<span class="math inline">\(F*G=-1\)</span>。</p><p>考虑 <span class="math inline">\(F*G\)</span> 的 <span class="math inline">\(\varnothing\)</span> 项是什么，我们可以知道 <span class="math inline">\(\sum_i(F*G)(i)=\sum_{i,j} F(i)G(j)\)</span>，因为 <span class="math inline">\(\sum_iG(i)=0\)</span>，所以右边为 <span class="math inline">\(0\)</span>，所以 <span class="math inline">\(\sum_i(F*G)(i)=0\)</span>，所以可以推出 <span class="math inline">\((F*G)(\varnothing)=2^n-1\)</span>。</p><p>设 <span class="math inline">\(H=F*G\)</span>，那么就有 <span class="math inline">\(h(S)=\begin{cases}2^n-1&amp;S=\varnothing\\-1&amp;S\not=\varnothing\end{cases}\)</span>。</p><p><span class="math inline">\(G,H\)</span> 我们都知道，考虑反推 <span class="math inline">\(F\)</span>。</p><p>设 <span class="math inline">\(FWTX\)</span> 为集合幂级数 <span class="math inline">\(X\)</span> 在 <span class="math inline">\(FWT\)</span> 之后的结果。根据异或卷积 <span class="math inline">\(FWT\)</span> 的公式（在上面给出的博客有详细介绍）<span class="math inline">\(F(i)=\sum_j(-1)^{|i\text{ and }j|}F(j)\)</span>，不难得到 <span class="math inline">\(FWTG(S)=\begin{cases}0&amp;S=\varnothing\\\sum_{|T|=1}(-1)^{|S\text{ and T|}}p-1&amp;S\not=\varnothing\end{cases}\)</span>，<span class="math inline">\(FWTH(S)=\begin{cases}0&amp;S=\varnothing\\2^n&amp;S\not=\varnothing\end{cases}\)</span>。对于前者，就是照搬式子，然后在 <span class="math inline">\(S=\varnothing\)</span> 处特别展开一下。对于后者，<span class="math inline">\(S=\varnothing\)</span> 的部分是 <span class="math inline">\(H(S)\)</span> 全部相加显然为 <span class="math inline">\(0\)</span>，而其它位置，对 <span class="math inline">\(FWTH(S)\)</span> 贡献为正的 <span class="math inline">\(H(S)\)</span> 和负的 <span class="math inline">\(H(S)\)</span> 应该各占一半，而 <span class="math inline">\(H(\varnothing)\)</span> 的贡献为正，那么剩下的部分相加就应该是 <span class="math inline">\((-1)\times(-1)\)</span>，再加上 <span class="math inline">\(H(\varnothing)\)</span> 就为 <span class="math inline">\(2^n\)</span>。</p><p>那么我们可以很轻易的得到，在 <span class="math inline">\(S\not=\varnothing\)</span> 时， <span class="math inline">\(FWTF(S)=\frac{2^n}{\sum_{|T|=1}(-1)^{|S\text{ and T|}}p-1}\)</span>，而当 <span class="math inline">\(S=\varnothing\)</span> 的时候，<span class="math inline">\(FWTF(S)\)</span> 用除法求就 <span class="math inline">\(\text{nan}\)</span> 了，所以需要特别处理。</p><p>考虑在 <span class="math inline">\(\sum_SFWTF(S)\)</span> 中每个 <span class="math inline">\(F(S)\)</span> 的贡献，假设 <span class="math inline">\(|S|=X\)</span>，枚举 <span class="math inline">\(|S \text{ and } T|\)</span>，那么就有 <span class="math inline">\(\sum_k(-1)^kC_X^k2^{n-X}=2^{n-X}[X=0]\)</span>，其中 <span class="math inline">\(C_x^y\)</span> 表示组合数（后同）。所以 <span class="math inline">\(\sum_S FWTF(S)=2^nF(\varnothing)\)</span>，而上文有 <span class="math inline">\(F(\varnothing)=0\)</span>，所以 <span class="math inline">\(\sum_S FWTF(S)=0\)</span>。所以 <span class="math inline">\(FWTF(\varnothing)\)</span> 就是 <span class="math inline">\(-\sum_{S\not=\varnothing}FWTF(S)\)</span>。</p><p>根据上面推导，我们也可以知道 <span class="math inline">\(F(S)=\frac{1}{2^n}\sum_T(-1)^{|S\text{ and }T|}FWTF(T)\)</span>。（原理也是 <span class="math inline">\(\sum_k(-1)^kC_X^k=[X=0]\)</span>）。</p><p>把 <span class="math inline">\(\varnothing\)</span> 单独考虑，那么就有 <span class="math inline">\(F(S)=\sum_{T\not=\varnothing}(\frac{1}{1-\sum_{|U|=1}(-1)^{|U\text{ and }T|}p}-(-1)^{|S\text{ and }T|}\frac{1}{1-\sum_{|U|=1}(-1)^{|U\text{ and }T|}p})\)</span>。</p><p>把左右相抵的去掉，稍加整理，有 <span class="math inline">\(F(S)=\sum_{(-1)^{T\text{ and } S}=-1}\frac{2}{2\sum_{|U|=1}p[|U\text{ and }T|=1]}\)</span>。</p><p>最后就是一个简单 DP 了<del>（不会吧不会吧，推到这里还不会 DP？）</del>。</p><p>设 <span class="math inline">\(dp_{i,j,0/1}\)</span> 表示前 <span class="math inline">\(i\)</span> 个开关，分子总和为 <span class="math inline">\(j\)</span>，交的奇偶性为 <span class="math inline">\(0/1\)</span> 的方案数。转移显然，总复杂度 <span class="math inline">\(O(n\sum p)\)</span>。</p><p>贴个代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(...) fprintf(stderr, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RI register int</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FILEIO(name) freopen(name<span class="meta-string">&quot;.in&quot;</span>, <span class="meta-string">&quot;r&quot;</span>, stdin), freopen(name<span class="meta-string">&quot;.out&quot;</span>, <span class="meta-string">&quot;w&quot;</span>, stdout);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> MAXN = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> p[MAXN], s[MAXN], sum[MAXN];</span><br><span class="line"><span class="keyword">int</span> f[MAXN][<span class="number">50005</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123; x += y - mod; x += (x &gt;&gt; <span class="number">31</span>) &amp; mod; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> re = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod)</span><br><span class="line">    <span class="keyword">if</span> (k &amp; <span class="number">1</span>) re = <span class="number">1l</span>l * re * a % mod;</span><br><span class="line">  <span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line">  FILEIO(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; s[i];</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p[i], sum[i] = sum[i - <span class="number">1</span>] + p[i];</span><br><span class="line">  f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (RI j = p[i]; j &lt;= sum[i]; ++j) &#123;</span><br><span class="line">      Add(f[i][j][<span class="number">0</span>], f[i - <span class="number">1</span>][j - p[i]][<span class="number">0</span> ^ s[i]]);</span><br><span class="line">      Add(f[i][j][<span class="number">1</span>], f[i - <span class="number">1</span>][j - p[i]][<span class="number">1</span> ^ s[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (RI j = <span class="number">0</span>; j &lt;= sum[i]; ++j) &#123;</span><br><span class="line">      Add(f[i][j][<span class="number">0</span>], f[i - <span class="number">1</span>][j][<span class="number">0</span>]);</span><br><span class="line">      Add(f[i][j][<span class="number">1</span>], f[i - <span class="number">1</span>][j][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (RI i = <span class="number">0</span>; i &lt;= sum[n]; ++i)</span><br><span class="line">    Add(ans, <span class="number">1l</span>l * sum[n] * f[n][i][<span class="number">1</span>] % mod * qpow(i, mod - <span class="number">2</span>) % mod);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// created by Daniel yuan</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     ________</span></span><br><span class="line"><span class="comment">    /        \</span></span><br><span class="line"><span class="comment">   / /      \ \</span></span><br><span class="line"><span class="comment">  / /        \ \</span></span><br><span class="line"><span class="comment">  \            /</span></span><br><span class="line"><span class="comment">   \  ______  /</span></span><br><span class="line"><span class="comment">    \________/</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;把初始状态和目标状态交换，题目不变。&lt;/p&gt;
&lt;p&gt;为了方便，设 &lt;span class=&quot;math inline&quot;&gt;\(p_i\)&lt;/span&gt; 为 &lt;span class=&quot;math inline&quot;&gt;\(i\)&lt;/span&gt; 被选的概率，对应到输入即 &lt;span class=&quot;math inline&quot;&gt;\(\frac{p_i}{\sum_{j=1}^n p_j}\)&lt;/span&gt; 。&lt;/p&gt;
&lt;p&gt;设 &lt;span class=&quot;math inline&quot;&gt;\(f(S)\)&lt;/span&gt; 表示从 &lt;span class=&quot;math inline&quot;&gt;\(S\)&lt;/span&gt; 状态开始，期望走 &lt;span class=&quot;math inline&quot;&gt;\(f(S)\)&lt;/span&gt; 步到达全零状态。为了方便，我们定义 &lt;span class=&quot;math inline&quot;&gt;\(\varnothing\)&lt;/span&gt; 表示全零状态。&lt;/p&gt;
&lt;p&gt;那么显然有</summary>
    
    
    
    
    <category term="FWT" scheme="http://example.com/tags/FWT/"/>
    
    <category term="多项式" scheme="http://example.com/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
    <category term="期望概率" scheme="http://example.com/tags/%E6%9C%9F%E6%9C%9B%E6%A6%82%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>FWT 小结</title>
    <link href="http://example.com/2021/01/19/FWT-%E5%B0%8F%E7%BB%93/"/>
    <id>http://example.com/2021/01/19/FWT-%E5%B0%8F%E7%BB%93/</id>
    <published>2021-01-19T00:58:42.000Z</published>
    <updated>2021-01-21T01:19:24.268Z</updated>
    
    <content type="html"><![CDATA[<p>FWT 是快速求形如 <span class="math inline">\(C(x)=\sum_{i?j=x}A(i)B(j)\)</span> 的算法，其中 <span class="math inline">\(?\)</span> 表示一种二进制的位运算。</p><a id="more"></a><h4 id="原理">原理</h4><p>其实 FWT 背板挺容易的，但是因为考试趋向越来越本质化，所以我们要逐渐开始了解一些原来背板算法的原理。</p><p>类似于 FFT，我们考虑从最本源的地方来了解 FWT——构造一种线性变换 <span class="math inline">\(A\rightarrow A&#39;\)</span>，使得 <span class="math inline">\(C&#39;(x)=A&#39;(x)B&#39;(x)\)</span>，这样去掉线性变换的复杂度，总复杂度是 <span class="math inline">\(O(len)\)</span> 的。需要注意的是，这里的 <span class="math inline">\(A,B,C\)</span> 需要做同一种线性变换。</p><p>因为我们所做的是线性变换（即只存在加减），那么在 <span class="math inline">\(A&#39;\)</span> 中，我们可以把 <span class="math inline">\(A\)</span> 中每个数对它的贡献用一个系数表示，即 <span class="math inline">\(A&#39;(x)=\sum_i f(x,i)A(i)\)</span>。</p><p>那么 <span class="math inline">\(C&#39;(x)=\sum_i f(x,i)C(i)=\sum_if(x,i)\sum_{j?k=i}A(j)B(k)\)</span>，<span class="math inline">\(A&#39;(x)B&#39;(x)=\sum_if(x,i)A(i)\sum_jf(x,j)B(j)\)</span>。整理得 <span class="math inline">\(\sum_i\sum_jf(x,i?j)A(i)B(j)=\sum_i\sum_jf(x,i)f(x,j)A(i)B(j)\)</span>。故有 <span class="math inline">\(f(x,i?j)=f(x,i)f(x,j)\)</span>。</p><p>也就是说我们需要构造 <span class="math inline">\(f(x,i)\)</span>，使得它满足上述需求。</p><p>对于或操作，有 <span class="math inline">\(f(x,i \text{ or }j)=f(x,i)f(x,j)\)</span>，不难发现 <span class="math inline">\(i\text{ or }j\in x\Leftrightarrow i\in x\land j\in x\)</span>，那么设 <span class="math inline">\(f(x,i)=[i\in x]\)</span> 即可。</p><p>对于与操作，有 <span class="math inline">\(f(x,i\text{ and }j)=f(x,i)f(x,j)\)</span>，和或相似的，<span class="math inline">\(x\in i\text{ and }j\Leftrightarrow x\in i\land x\in j\)</span>。<span class="math inline">\(f(x,i)=[x\in i]\)</span>。</p><p>对于异或操作，这可能就有些麻烦。我们需要挖掘一些异或的性质。对于两个数 <span class="math inline">\(x,y\)</span>，显然 <span class="math inline">\(x\)</span> 的 <span class="math inline">\(1\)</span> 的个数加上 <span class="math inline">\(y\)</span> 的 <span class="math inline">\(1\)</span> 的个数的奇偶性和 <span class="math inline">\(x \text{ xor } y\)</span> 的相同。而与和异或有恒等式 <span class="math inline">\((x\text{ xor } y)\text{ and } z=(x\text{ and }z)\text{ xor }(y\text{ and }z)\)</span>（不难证明），所以 <span class="math inline">\(i\text{ and }x\)</span> 的 <span class="math inline">\(1\)</span> 的个数加上 <span class="math inline">\(j\text{ and }x\)</span> 的 <span class="math inline">\(1\)</span> 的个数的奇偶性和 <span class="math inline">\((i\text{ and }x)\text{ xor }(j\text{ and }x)=(i\text{ xor } j)\text{ and } x\)</span> 的相同，而奇偶性的区分加减我们一般用 <span class="math inline">\((-1)^k\)</span> ，所以设 <span class="math inline">\(f(x,i)=(-1)^{|x \text { and }i|}\)</span> 即可。</p><h4 id="实现">实现</h4><p>下面只讨论 FWT，对于 IFWT，其就是 FWT 的逆向过程。</p><p>考虑按位计算贡献。</p><p>设 <span class="math inline">\(f_k(S)\)</span> 表示对于 <span class="math inline">\(S\)</span>，已经计算了前 <span class="math inline">\(k\)</span> 位任意，后面位数严格和 <span class="math inline">\(S\)</span> 相等且暂未考虑其对贡献的影响的贡献。考虑从 <span class="math inline">\(f_k(S)\)</span> 推到 <span class="math inline">\(f_{k+1}(S)\)</span>。</p><p>考虑每个数对 <span class="math inline">\(u,v\)</span> 互相的贡献，其中 <span class="math inline">\(u,v\)</span> 仅在第 <span class="math inline">\(k+1\)</span> 位不同，为了方便，设 <span class="math inline">\(u&lt;v\)</span>。</p><p>对于或，<span class="math inline">\(f_k(u)\)</span> 中存的是后面位数和 <span class="math inline">\(u\)</span> 相等，<span class="math inline">\(1\sim k\)</span> 位是 <span class="math inline">\(u\)</span> 子集的数的贡献，<span class="math inline">\(f_k(v)\)</span> 同理，那么显然考虑了第 <span class="math inline">\(k+1\)</span> 位后，<span class="math inline">\(f_{k+1}(u)=f_k(u)\)</span> ，<span class="math inline">\(f_{k+1}(v)=f_k(u)+f_k(v)\)</span>。</p><p>类似的，对于与，<span class="math inline">\(f_{k+1}(u)=f_k(u)+f_k(v)\)</span> ，<span class="math inline">\(f_{k+1}(v)=f_k(v)\)</span>。</p><p>对于异或，<span class="math inline">\(u\)</span> 在 <span class="math inline">\(k+1\)</span> 位对数的符号没有影响，而 <span class="math inline">\(v\)</span> 在 <span class="math inline">\(k+1\)</span> 位对 <span class="math inline">\(k+1\)</span> 位为 <span class="math inline">\(1\)</span> 的数的符号有一个 <span class="math inline">\(-1\)</span> 的影响（因为之前没有考虑这一位对答案贡献的影响），所以 <span class="math inline">\(f_{k+1}(u)=f_k(u)+f_k(v)\)</span>，<span class="math inline">\(f_{k+1}(v)=f_k(u)-f_k(v)\)</span>。</p><p>这样就能在 <span class="math inline">\(O(len\log len)\)</span> 的时间内对于 <span class="math inline">\(A\)</span> 求得 <span class="math inline">\(A&#39;\)</span>。而逆变化就是正变化的相反操作，在此就不再赘述。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;p&gt;FWT 是快速求形如 &lt;span class=&quot;math inline&quot;&gt;\(C(x)=\sum_{i?j=x}A(i)B(j)\)&lt;/span&gt; 的算法，其中 &lt;span class=&quot;math inline&quot;&gt;\(?\)&lt;/span&gt; 表示一种二进制的位运算。&lt;/p&gt;</summary>
    
    
    
    
    <category term="FWT" scheme="http://example.com/tags/FWT/"/>
    
    <category term="多项式" scheme="http://example.com/tags/%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
  </entry>
  
</feed>
